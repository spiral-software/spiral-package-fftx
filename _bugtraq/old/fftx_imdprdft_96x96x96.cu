/* RuleTree:
rt :=
TFCall_tag( TFCall(IMDPRDFT([ 96, 96, 96 ], 1), rec(
  fname := "fftx_imdprdft_96x96x96",
  params := [ sym ] )).withTags([ ASIMTKernelFlag(ASIMTGridDimX), ASIMTBlockDimY, ASIMTBlockDimX ]),
  IMDPRDFT_tSPL_RowCol_SIMT( IMDPRDFT([ 96, 96, 96 ], 1).withTags([ ASIMTKernelFlag(ASIMTGridDimX), ASIMTBlockDimY, ASIMTBlockDimX ]),
    IxA_SIMT( TTensorI(TTensorI(IPRDFT(96, 1), 96, APar, APar), 96, APar, APar).withTags([ ASIMTKernelFlag(ASIMTGridDimX), ASIMTBlockDimY, ASIMTBlockDimX ]),
      IxA_SIMT( TTensorI(IPRDFT(96, 1), 96, APar, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
        IPRDFT1_CT( IPRDFT(96, 1).withTags([ ASIMTBlockDimX ]),
          IPRDFT1_CT( IPRDFT(12, 1),
            IPRDFT1_CT( IPRDFT(4, 1),
              IPRDFT1_Base2( IPRDFT(2, 1) ),
              DFT_Base( DFT(2, 1) ),
              IPRDFT1_Base2( IPRDFT(2, 1) ),
              IPRDFT2_Base2( IPRDFT2(2, 1) ) ),
            DFT_CT( DFT(4, 1),
              DFT_Base( DFT(2, 1) ),
              DFT_Base( DFT(2, 1) ) ),
            IPRDFT_PD( IPRDFT(3, 1) ) ),
          DFT_CT( DFT(12, 1),
            DFT_CT( DFT(4, 1),
              DFT_Base( DFT(2, 1) ),
              DFT_Base( DFT(2, 1) ) ),
            DFT_PD( DFT(3, 1) ) ),
          IPRDFT1_CT( IPRDFT(8, 1),
            IPRDFT1_CT( IPRDFT(4, 1),
              IPRDFT1_Base2( IPRDFT(2, 1) ),
              DFT_Base( DFT(2, 1) ),
              IPRDFT1_Base2( IPRDFT(2, 1) ),
              IPRDFT2_Base2( IPRDFT2(2, 1) ) ),
            DFT_CT( DFT(4, 1),
              DFT_Base( DFT(2, 1) ),
              DFT_Base( DFT(2, 1) ) ),
            IPRDFT1_Base2( IPRDFT(2, 1) ),
            IPRDFT2_CT( IPRDFT2(4, 1),
              DFT_Base( DFT(2, 1) ),
              IPRDFT2_Base2( IPRDFT2(2, 1) ) ) ),
          IPRDFT2_CT( IPRDFT2(12, 1),
            DFT_PD( DFT(3, 1) ),
            IPRDFT2_CT( IPRDFT2(4, 1),
              DFT_Base( DFT(2, 1) ),
              IPRDFT2_Base2( IPRDFT2(2, 1) ) ) ) ) ) ),
    AxI_SIMT( TTensorI(MDDFT([ 96, 96 ], 1, false), 49, AVec, AVec).withTags([ ASIMTKernelFlag(ASIMTGridDimX), ASIMTBlockDimY, ASIMTBlockDimX ]),
      MDDFT_tSPL_Pease_SIMT( MDDFT([ 96, 96 ], 1, false).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
        TCompose_tag( TCompose([ TTensorI(DFT(96, 1), 96, AVec, APar), TTensorI(DFT(96, 1), 96, AVec, APar) ]).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
          L_IxA_SIMT( TTensorI(DFT(96, 1), 96, AVec, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
            TCompose_tag( TCompose([ TL(576, 96, 1, 16), TTensorI(TCompose([ TL(1536, 96, 1, 1), TTensorI(DFT(96, 1), 16, APar, APar) ]), 6, APar, APar) ]).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
              L_SIMT( TL(576, 96, 1, 16).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]) ),
              IxA_SIMT( TTensorI(TCompose([ TL(1536, 96, 1, 1), TTensorI(DFT(96, 1), 16, APar, APar) ]), 6, APar, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
                TCompose_tag( TCompose([ TL(1536, 96, 1, 1), TTensorI(DFT(96, 1), 16, APar, APar) ]).withTags([ ASIMTBlockDimX ]),
                  L_SIMT( TL(1536, 96, 1, 1).withTags([ ASIMTBlockDimX ]) ),
                  IxA_SIMT( TTensorI(DFT(96, 1), 16, APar, APar).withTags([ ASIMTBlockDimX ]),
                    DFT_CT( DFT(96, 1),
                      DFT_CT( DFT(12, 1),
                        DFT_CT( DFT(4, 1),
                          DFT_Base( DFT(2, 1) ),
                          DFT_Base( DFT(2, 1) ) ),
                        DFT_PD( DFT(3, 1) ) ),
                      DFT_CT( DFT(8, 1),
                        DFT_CT( DFT(4, 1),
                          DFT_Base( DFT(2, 1) ),
                          DFT_Base( DFT(2, 1) ) ),
                        DFT_Base( DFT(2, 1) ) ) ) ) ) ) ) ),
          L_IxA_SIMT( TTensorI(DFT(96, 1), 96, AVec, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
            TCompose_tag( TCompose([ TL(576, 96, 1, 16), TTensorI(TCompose([ TL(1536, 96, 1, 1), TTensorI(DFT(96, 1), 16, APar, APar) ]), 6, APar, APar) ]).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
              L_SIMT( TL(576, 96, 1, 16).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]) ),
              IxA_SIMT( TTensorI(TCompose([ TL(1536, 96, 1, 1), TTensorI(DFT(96, 1), 16, APar, APar) ]), 6, APar, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
                TCompose_tag( TCompose([ TL(1536, 96, 1, 1), TTensorI(DFT(96, 1), 16, APar, APar) ]).withTags([ ASIMTBlockDimX ]),
                  L_SIMT( TL(1536, 96, 1, 1).withTags([ ASIMTBlockDimX ]) ),
                  IxA_SIMT( TTensorI(DFT(96, 1), 16, APar, APar).withTags([ ASIMTBlockDimX ]),
                    DFT_CT( DFT(96, 1),
                      DFT_CT( DFT(12, 1),
                        DFT_CT( DFT(4, 1),
                          DFT_Base( DFT(2, 1) ),
                          DFT_Base( DFT(2, 1) ) ),
                        DFT_PD( DFT(3, 1) ) ),
                      DFT_CT( DFT(8, 1),
                        DFT_CT( DFT(4, 1),
                          DFT_Base( DFT(2, 1) ),
                          DFT_Base( DFT(2, 1) ) ),
                        DFT_Base( DFT(2, 1) ) ) ) ) ) ) ) ) ) ) ) ) )
;
*/


/*
 * This code was generated by Spiral 8.3.0, www.spiral.net
 */

__device__ double  *P1, *P2, *T3, *T32, *T61;
 __device__ double D3[192] = {1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 0.96592582628906831, 0.25881904510252079, 
      0.99144486137381038, 0.1305261922200516, 0.92387953251128674, 0.38268343236508978, 
      0.99785892323860348, 0.065403129230143076, 0.94693012949510569, 0.32143946530316159, 
      0.98078528040323043, 0.19509032201612825, 0.89687274153268826, 0.4422886902190013, 
      1.0, 0.0, 0.8660254037844386, 0.5, 
      0.96592582628906831, 0.25881904510252079, 0.70710678118654757, 0.70710678118654757, 
      0.99144486137381038, 0.1305261922200516, 0.79335334029123517, 0.60876142900872066, 
      0.92387953251128674, 0.38268343236508978, 0.60876142900872066, 0.79335334029123517, 
      1.0, 0.0, 0.70710678118654757, 0.70710678118654757, 
      0.92387953251128674, 0.38268343236508978, 0.38268343236508978, 0.92387953251128674, 
      0.98078528040323043, 0.19509032201612825, 0.55557023301960218, 0.83146961230254524, 
      0.83146961230254524, 0.55557023301960218, 0.19509032201612825, 0.98078528040323043, 
      1.0, 0.0, 0.5, 0.8660254037844386, 
      0.8660254037844386, 0.5, 0.0, 1.0, 
      0.96592582628906831, 0.25881904510252079, 0.25881904510252079, 0.96592582628906831, 
      0.70710678118654757, 0.70710678118654757, (-0.25881904510252079), 0.96592582628906831, 
      1.0, 0.0, 0.25881904510252079, 0.96592582628906831, 
      0.79335334029123517, 0.60876142900872066, (-0.38268343236508978), 0.92387953251128674, 
      0.94693012949510569, 0.32143946530316159, (-0.065403129230143076), 0.99785892323860348, 
      0.55557023301960218, 0.83146961230254524, (-0.65934581510006895), 0.75183980747897738, 
      1.0, 0.0, 0.0, 1.0, 
      0.70710678118654757, 0.70710678118654757, (-0.70710678118654757), 0.70710678118654757, 
      0.92387953251128674, 0.38268343236508978, (-0.38268343236508978), 0.92387953251128674, 
      0.38268343236508978, 0.92387953251128674, (-0.92387953251128674), 0.38268343236508978, 
      1.0, 0.0, (-0.25881904510252079), 0.96592582628906831, 
      0.60876142900872066, 0.79335334029123517, (-0.92387953251128674), 0.38268343236508978, 
      0.89687274153268826, 0.4422886902190013, (-0.65934581510006895), 0.75183980747897738, 
      0.19509032201612825, 0.98078528040323043, (-0.99785892323860348), (-0.065403129230143076), 
      1.0, 0.0, (-0.5), 0.8660254037844386, 
      0.5, 0.8660254037844386, (-1.0), 0.0, 
      0.8660254037844386, 0.5, (-0.8660254037844386), 0.5, 
      0.0, 1.0, (-0.8660254037844386), (-0.5), 
      1.0, 0.0, (-0.70710678118654757), 0.70710678118654757, 
      0.38268343236508978, 0.92387953251128674, (-0.92387953251128674), (-0.38268343236508978), 
      0.83146961230254524, 0.55557023301960218, (-0.98078528040323043), 0.19509032201612825, 
      (-0.19509032201612825), 0.98078528040323043, (-0.55557023301960218), (-0.83146961230254524), 
      1.0, 0.0, (-0.8660254037844386), 0.5, 
      0.25881904510252079, 0.96592582628906831, (-0.70710678118654757), (-0.70710678118654757), 
      0.79335334029123517, 0.60876142900872066, (-0.99144486137381038), (-0.1305261922200516), 
      (-0.38268343236508978), 0.92387953251128674, (-0.1305261922200516), (-0.99144486137381038), 
      1.0, 0.0, (-0.96592582628906831), 0.25881904510252079, 
      0.1305261922200516, 0.99144486137381038, (-0.38268343236508978), (-0.92387953251128674), 
      0.75183980747897738, 0.65934581510006895, (-0.89687274153268826), (-0.4422886902190013), 
      (-0.55557023301960218), 0.83146961230254524, 0.32143946530316159, (-0.94693012949510569)};

 __constant__ double D1[72] = {1.0, 0.0, 0.92387953251128674, 0.38268343236508978, 
      0.98078528040323043, 0.19509032201612825, 0.83146961230254524, 0.55557023301960218, 
      0.99785892323860348, 0.065403129230143076, 0.89687274153268826, 0.4422886902190013, 
      0.96592582628906831, 0.25881904510252079, 0.79335334029123517, 0.60876142900872066, 
      0.99144486137381038, 0.1305261922200516, 0.8660254037844386, 0.5, 
      0.94693012949510569, 0.32143946530316159, 0.75183980747897738, 0.65934581510006895, 
      1.0, 0.0, 0.70710678118654757, 0.70710678118654757, 
      0.92387953251128674, 0.38268343236508978, 0.38268343236508978, 0.92387953251128674, 
      0.99144486137381038, 0.1305261922200516, 0.60876142900872066, 0.79335334029123517, 
      0.8660254037844386, 0.5, 0.25881904510252079, 0.96592582628906831, 
      0.96592582628906831, 0.25881904510252079, 0.5, 0.8660254037844386, 
      0.79335334029123517, 0.60876142900872066, 0.1305261922200516, 0.99144486137381038, 
      1.0, 0.0, 0.38268343236508978, 0.92387953251128674, 
      0.83146961230254524, 0.55557023301960218, (-0.19509032201612825), 0.98078528040323043, 
      0.98078528040323043, 0.19509032201612825, 0.19509032201612825, 0.98078528040323043, 
      0.70710678118654757, 0.70710678118654757, (-0.38268343236508978), 0.92387953251128674, 
      0.92387953251128674, 0.38268343236508978, 0.0, 1.0, 
      0.55557023301960218, 0.83146961230254524, (-0.55557023301960218), 0.83146961230254524};


__global__ void ker_fftx_imdprdft_96x96x960(double  *X) {
    double a646, a647, a648, a649, a651, a652, a653, a654, 
            a656, a657, a658, a659, a660, a661, a662, a663, 
            a664, a665, a666, a667, s100, s101, s102, s103, 
            s104, s105, s106, s107, s108, s109, s110, s111, 
            s112, s93, s94, s95, s96, s97, s98, s99, 
            t335, t336, t337, t338, t339, t340, t341, t342, 
            t343, t344, t345, t346, t347, t348, t349, t350, 
            t351, t352, t353, t354, t355, t356, t357, t358, 
            t359, t360, t361, t362, t363, t364, t365, t366, 
            t367, t368, t369, t370, t371, t372, t373, t374, 
            t375, t376, t377, t378;
    int a641, a642, a643, a644, a645, a650, a655;
    a641 = (threadIdx.x / 192);
    a642 = (threadIdx.x % 192);
    a643 = (a642 / 12);
    a644 = (a642 % 12);
    a645 = ((2*blockIdx.x) + (150528*a641) + (9408*a643) + (98*a644));
    s93 = X[a645];
    s94 = X[(a645 + 1)];
    s95 = X[(a645 + 4704)];
    s96 = X[(a645 + 4705)];
    t335 = (s93 + s95);
    t336 = (s94 + s96);
    t337 = (s93 - s95);
    t338 = (s94 - s96);
    s97 = X[(a645 + 1176)];
    s98 = X[(a645 + 1177)];
    s99 = X[(a645 + 5880)];
    s100 = X[(a645 + 5881)];
    t339 = (s97 + s99);
    t340 = (s98 + s100);
    a646 = (0.70710678118654757*(s97 - s99));
    a647 = (0.70710678118654757*(s98 - s100));
    s101 = (a646 - a647);
    s102 = (a646 + a647);
    s103 = X[(a645 + 2352)];
    s104 = X[(a645 + 2353)];
    s105 = X[(a645 + 7056)];
    s106 = X[(a645 + 7057)];
    t341 = (s103 + s105);
    t342 = (s104 + s106);
    t343 = (s103 - s105);
    t344 = (s104 - s106);
    s107 = X[(a645 + 3528)];
    s108 = X[(a645 + 3529)];
    s109 = X[(a645 + 8232)];
    s110 = X[(a645 + 8233)];
    t345 = (s107 + s109);
    t346 = (s108 + s110);
    a648 = (0.70710678118654757*(s107 - s109));
    a649 = (0.70710678118654757*(s108 - s110));
    s111 = (a648 + a649);
    s112 = (a648 - a649);
    t347 = (t335 + t341);
    t348 = (t336 + t342);
    t349 = (t335 - t341);
    t350 = (t336 - t342);
    t351 = (t339 + t345);
    t352 = (t340 + t346);
    t353 = (t339 - t345);
    t354 = (t340 - t346);
    t355 = (t347 + t351);
    t356 = (t348 + t352);
    t357 = (t347 - t351);
    t358 = (t348 - t352);
    a650 = (16*a644);
    a651 = D3[a650];
    a652 = D3[(a650 + 1)];
    a653 = D3[(a650 + 2)];
    a654 = D3[(a650 + 3)];
    a655 = ((3072*a641) + (192*a643) + a650);
    T3[(a655 + (18432*blockIdx.x))] = ((a651*t355) - (a652*t356));
    T3[((a655 + 1) + (18432*blockIdx.x))] = ((a652*t355) + (a651*t356));
    T3[((a655 + 8) + (18432*blockIdx.x))] = ((a653*t357) - (a654*t358));
    T3[((a655 + 9) + (18432*blockIdx.x))] = ((a654*t357) + (a653*t358));
    t359 = (t349 - t354);
    t360 = (t350 + t353);
    t361 = (t349 + t354);
    t362 = (t350 - t353);
    a656 = D3[(4 + a650)];
    a657 = D3[(5 + a650)];
    a658 = D3[(6 + a650)];
    a659 = D3[(7 + a650)];
    T3[((a655 + 4) + (18432*blockIdx.x))] = ((a656*t359) - (a657*t360));
    T3[((a655 + 5) + (18432*blockIdx.x))] = ((a657*t359) + (a656*t360));
    T3[((a655 + 12) + (18432*blockIdx.x))] = ((a658*t361) - (a659*t362));
    T3[((a655 + 13) + (18432*blockIdx.x))] = ((a659*t361) + (a658*t362));
    t363 = (t337 - t344);
    t364 = (t338 + t343);
    t365 = (t337 + t344);
    t366 = (t338 - t343);
    t367 = (s101 - s111);
    t368 = (s102 + s112);
    t369 = (s101 + s111);
    t370 = (s102 - s112);
    t371 = (t363 + t367);
    t372 = (t364 + t368);
    t373 = (t363 - t367);
    t374 = (t364 - t368);
    a660 = D3[(a650 + 8)];
    a661 = D3[(9 + a650)];
    a662 = D3[(10 + a650)];
    a663 = D3[(11 + a650)];
    T3[((a655 + 2) + (18432*blockIdx.x))] = ((a660*t371) - (a661*t372));
    T3[((a655 + 3) + (18432*blockIdx.x))] = ((a661*t371) + (a660*t372));
    T3[((a655 + 10) + (18432*blockIdx.x))] = ((a662*t373) - (a663*t374));
    T3[((a655 + 11) + (18432*blockIdx.x))] = ((a663*t373) + (a662*t374));
    t375 = (t365 - t370);
    t376 = (t366 + t369);
    t377 = (t365 + t370);
    t378 = (t366 - t369);
    a664 = D3[(12 + a650)];
    a665 = D3[(13 + a650)];
    a666 = D3[(14 + a650)];
    a667 = D3[(15 + a650)];
    T3[((a655 + 6) + (18432*blockIdx.x))] = ((a664*t375) - (a665*t376));
    T3[((a655 + 7) + (18432*blockIdx.x))] = ((a665*t375) + (a664*t376));
    T3[((a655 + 14) + (18432*blockIdx.x))] = ((a666*t377) - (a667*t378));
    T3[((a655 + 15) + (18432*blockIdx.x))] = ((a667*t377) + (a666*t378));
    __syncthreads();
    if( threadIdx.x <= 767 ) {
        double s281, s282, s283, s284, s285, s286, s287, s288, 
                s289, s290, s291, s292, s293, s294, s295, s296, 
                s297, s298, s299, s300, s301, s302, s303, s304, 
                s305, s306, s307, s308, s309, s310, s311, s312, 
                s313, s314, s315, s316, s317, s318, s319, s320, 
                s321, s322, s323, s324, s325, s326, s327, s328, 
                s329, s330, s331, s332, s333, s334, s335, s336, 
                t588, t589, t590, t591, t592, t593, t594, t595, 
                t596, t597, t598, t599, t600, t601, t602, t603, 
                t604, t605, t606, t607, t608, t609, t610, t611, 
                t612, t613, t614, t615, t616, t617, t618, t619, 
                t620, t621, t622, t623, t624, t625, t626, t627, 
                t628, t629, t630, t631, t632, t633, t634, t635;
        int a1237, a1238, a1239, a1240, a1241, a1242;
        a1237 = (threadIdx.x / 128);
        a1238 = (threadIdx.x % 128);
        a1239 = (a1238 / 8);
        a1240 = (a1238 % 8);
        a1241 = ((3072*a1237) + (192*a1239) + (2*a1240));
        s281 = T3[(a1241 + (18432*blockIdx.x))];
        s282 = T3[((a1241 + 1) + (18432*blockIdx.x))];
        s283 = T3[((a1241 + 64) + (18432*blockIdx.x))];
        s284 = T3[((a1241 + 65) + (18432*blockIdx.x))];
        s285 = T3[((a1241 + 128) + (18432*blockIdx.x))];
        s286 = T3[((a1241 + 129) + (18432*blockIdx.x))];
        t588 = (s283 + s285);
        t589 = (s284 + s286);
        s287 = (s281 + t588);
        s288 = (s282 + t589);
        s289 = (s281 - (0.5*t588));
        s290 = (s282 - (0.5*t589));
        s291 = (0.8660254037844386*(s284 - s286));
        s292 = (0.8660254037844386*(s283 - s285));
        t590 = (s289 - s291);
        t591 = (s290 + s292);
        t592 = (s289 + s291);
        t593 = (s290 - s292);
        s293 = T3[((a1241 + 16) + (18432*blockIdx.x))];
        s294 = T3[((a1241 + 17) + (18432*blockIdx.x))];
        s295 = T3[((a1241 + 80) + (18432*blockIdx.x))];
        s296 = T3[((a1241 + 81) + (18432*blockIdx.x))];
        s297 = T3[((a1241 + 144) + (18432*blockIdx.x))];
        s298 = T3[((a1241 + 145) + (18432*blockIdx.x))];
        t594 = (s295 + s297);
        t595 = (s296 + s298);
        s299 = (s293 + t594);
        s300 = (s294 + t595);
        s301 = (s293 - (0.5*t594));
        s302 = (s294 - (0.5*t595));
        s303 = (0.8660254037844386*(s296 - s298));
        s304 = (0.8660254037844386*(s295 - s297));
        t596 = (s301 - s303);
        t597 = (s302 + s304);
        t598 = (s301 + s303);
        t599 = (s302 - s304);
        s305 = ((0.8660254037844386*t596) - (0.5*t597));
        s306 = ((0.5*t596) + (0.8660254037844386*t597));
        s307 = ((0.5*t598) - (0.8660254037844386*t599));
        s308 = ((0.8660254037844386*t598) + (0.5*t599));
        s309 = T3[((a1241 + 32) + (18432*blockIdx.x))];
        s310 = T3[((a1241 + 33) + (18432*blockIdx.x))];
        s311 = T3[((a1241 + 96) + (18432*blockIdx.x))];
        s312 = T3[((a1241 + 97) + (18432*blockIdx.x))];
        s313 = T3[((a1241 + 160) + (18432*blockIdx.x))];
        s314 = T3[((a1241 + 161) + (18432*blockIdx.x))];
        t600 = (s311 + s313);
        t601 = (s312 + s314);
        s315 = (s309 + t600);
        s316 = (s310 + t601);
        s317 = (s309 - (0.5*t600));
        s318 = (s310 - (0.5*t601));
        s319 = (0.8660254037844386*(s312 - s314));
        s320 = (0.8660254037844386*(s311 - s313));
        t602 = (s317 - s319);
        t603 = (s318 + s320);
        t604 = (s317 + s319);
        t605 = (s318 - s320);
        s321 = ((0.5*t602) - (0.8660254037844386*t603));
        s322 = ((0.8660254037844386*t602) + (0.5*t603));
        s323 = ((0.5*t604) + (0.8660254037844386*t605));
        s324 = ((0.8660254037844386*t604) - (0.5*t605));
        s325 = T3[((a1241 + 48) + (18432*blockIdx.x))];
        s326 = T3[((a1241 + 49) + (18432*blockIdx.x))];
        s327 = T3[((a1241 + 112) + (18432*blockIdx.x))];
        s328 = T3[((a1241 + 113) + (18432*blockIdx.x))];
        s329 = T3[((a1241 + 176) + (18432*blockIdx.x))];
        s330 = T3[((a1241 + 177) + (18432*blockIdx.x))];
        t606 = (s327 + s329);
        t607 = (s328 + s330);
        s331 = (s325 + t606);
        s332 = (s326 + t607);
        s333 = (s325 - (0.5*t606));
        s334 = (s326 - (0.5*t607));
        s335 = (0.8660254037844386*(s328 - s330));
        s336 = (0.8660254037844386*(s327 - s329));
        t608 = (s333 - s335);
        t609 = (s334 + s336);
        t610 = (s333 + s335);
        t611 = (s334 - s336);
        t612 = (s287 + s315);
        t613 = (s288 + s316);
        t614 = (s287 - s315);
        t615 = (s288 - s316);
        t616 = (s299 + s331);
        t617 = (s300 + s332);
        t618 = (s299 - s331);
        t619 = (s300 - s332);
        a1242 = ((18432*blockIdx.x) + (192*a1240) + (32*a1237) + (2*a1239));
        P1[a1242] = (t612 + t616);
        P1[(a1242 + 1)] = (t613 + t617);
        P1[(a1242 + 9216)] = (t612 - t616);
        P1[(a1242 + 9217)] = (t613 - t617);
        P1[(a1242 + 4608)] = (t614 - t619);
        P1[(a1242 + 4609)] = (t615 + t618);
        P1[(a1242 + 13824)] = (t614 + t619);
        P1[(a1242 + 13825)] = (t615 - t618);
        t620 = (t590 + s321);
        t621 = (t591 + s322);
        t622 = (t590 - s321);
        t623 = (t591 - s322);
        t624 = (s305 - t609);
        t625 = (s306 + t608);
        t626 = (s305 + t609);
        t627 = (s306 - t608);
        P1[(a1242 + 1536)] = (t620 + t624);
        P1[(a1242 + 1537)] = (t621 + t625);
        P1[(a1242 + 10752)] = (t620 - t624);
        P1[(a1242 + 10753)] = (t621 - t625);
        P1[(a1242 + 6144)] = (t622 - t627);
        P1[(a1242 + 6145)] = (t623 + t626);
        P1[(a1242 + 15360)] = (t622 + t627);
        P1[(a1242 + 15361)] = (t623 - t626);
        t628 = (t592 - s323);
        t629 = (t593 + s324);
        t630 = (t592 + s323);
        t631 = (t593 - s324);
        t632 = (s307 - t610);
        t633 = (s308 - t611);
        t634 = (s307 + t610);
        t635 = (s308 + t611);
        P1[(a1242 + 3072)] = (t628 + t632);
        P1[(a1242 + 3073)] = (t629 + t633);
        P1[(a1242 + 12288)] = (t628 - t632);
        P1[(a1242 + 12289)] = (t629 - t633);
        P1[(a1242 + 7680)] = (t630 - t635);
        P1[(a1242 + 7681)] = (t631 + t634);
        P1[(a1242 + 16896)] = (t630 + t635);
        P1[(a1242 + 16897)] = (t631 - t634);
    }
    __syncthreads();
}

__global__ void ker_fftx_imdprdft_96x96x961() {
    double a1885, a1886, a1887, a1888, a1890, a1891, a1892, a1893, 
            a1895, a1896, a1897, a1898, a1899, a1900, a1901, a1902, 
            a1903, a1904, a1905, a1906, s430, s431, s432, s433, 
            s434, s435, s436, s437, s438, s439, s440, s441, 
            s442, s443, s444, s445, s446, s447, s448, s449, 
            t776, t777, t778, t779, t780, t781, t782, t783, 
            t784, t785, t786, t787, t788, t789, t790, t791, 
            t792, t793, t794, t795, t796, t797, t798, t799, 
            t800, t801, t802, t803, t804, t805, t806, t807, 
            t808, t809, t810, t811, t812, t813, t814, t815, 
            t816, t817, t818, t819;
    int a1880, a1881, a1882, a1883, a1884, a1889, a1894;
    a1880 = (3072*(threadIdx.x / 192));
    a1881 = (threadIdx.x % 192);
    a1882 = (192*(a1881 / 12));
    a1883 = (a1881 % 12);
    a1884 = ((18432*blockIdx.x) + a1880 + a1882 + (2*a1883));
    s430 = P1[a1884];
    s431 = P1[(a1884 + 1)];
    s432 = P1[(a1884 + 96)];
    s433 = P1[(a1884 + 97)];
    t776 = (s430 + s432);
    t777 = (s431 + s433);
    t778 = (s430 - s432);
    t779 = (s431 - s433);
    s434 = P1[(a1884 + 24)];
    s435 = P1[(a1884 + 25)];
    s436 = P1[(a1884 + 120)];
    s437 = P1[(a1884 + 121)];
    t780 = (s434 + s436);
    t781 = (s435 + s437);
    a1885 = (0.70710678118654757*(s434 - s436));
    a1886 = (0.70710678118654757*(s435 - s437));
    s438 = (a1885 - a1886);
    s439 = (a1885 + a1886);
    s440 = P1[(a1884 + 48)];
    s441 = P1[(a1884 + 49)];
    s442 = P1[(a1884 + 144)];
    s443 = P1[(a1884 + 145)];
    t782 = (s440 + s442);
    t783 = (s441 + s443);
    t784 = (s440 - s442);
    t785 = (s441 - s443);
    s444 = P1[(a1884 + 72)];
    s445 = P1[(a1884 + 73)];
    s446 = P1[(a1884 + 168)];
    s447 = P1[(a1884 + 169)];
    t786 = (s444 + s446);
    t787 = (s445 + s447);
    a1887 = (0.70710678118654757*(s444 - s446));
    a1888 = (0.70710678118654757*(s445 - s447));
    s448 = (a1887 + a1888);
    s449 = (a1887 - a1888);
    t788 = (t776 + t782);
    t789 = (t777 + t783);
    t790 = (t776 - t782);
    t791 = (t777 - t783);
    t792 = (t780 + t786);
    t793 = (t781 + t787);
    t794 = (t780 - t786);
    t795 = (t781 - t787);
    t796 = (t788 + t792);
    t797 = (t789 + t793);
    t798 = (t788 - t792);
    t799 = (t789 - t793);
    a1889 = (16*a1883);
    a1890 = D3[a1889];
    a1891 = D3[(a1889 + 1)];
    a1892 = D3[(a1889 + 2)];
    a1893 = D3[(a1889 + 3)];
    a1894 = (a1880 + a1882 + a1889);
    T32[(a1894 + (18432*blockIdx.x))] = ((a1890*t796) - (a1891*t797));
    T32[((a1894 + 1) + (18432*blockIdx.x))] = ((a1891*t796) + (a1890*t797));
    T32[((a1894 + 8) + (18432*blockIdx.x))] = ((a1892*t798) - (a1893*t799));
    T32[((a1894 + 9) + (18432*blockIdx.x))] = ((a1893*t798) + (a1892*t799));
    t800 = (t790 - t795);
    t801 = (t791 + t794);
    t802 = (t790 + t795);
    t803 = (t791 - t794);
    a1895 = D3[(4 + a1889)];
    a1896 = D3[(5 + a1889)];
    a1897 = D3[(6 + a1889)];
    a1898 = D3[(7 + a1889)];
    T32[((a1894 + 4) + (18432*blockIdx.x))] = ((a1895*t800) - (a1896*t801));
    T32[((a1894 + 5) + (18432*blockIdx.x))] = ((a1896*t800) + (a1895*t801));
    T32[((a1894 + 12) + (18432*blockIdx.x))] = ((a1897*t802) - (a1898*t803));
    T32[((a1894 + 13) + (18432*blockIdx.x))] = ((a1898*t802) + (a1897*t803));
    t804 = (t778 - t785);
    t805 = (t779 + t784);
    t806 = (t778 + t785);
    t807 = (t779 - t784);
    t808 = (s438 - s448);
    t809 = (s439 + s449);
    t810 = (s438 + s448);
    t811 = (s439 - s449);
    t812 = (t804 + t808);
    t813 = (t805 + t809);
    t814 = (t804 - t808);
    t815 = (t805 - t809);
    a1899 = D3[(a1889 + 8)];
    a1900 = D3[(9 + a1889)];
    a1901 = D3[(10 + a1889)];
    a1902 = D3[(11 + a1889)];
    T32[((a1894 + 2) + (18432*blockIdx.x))] = ((a1899*t812) - (a1900*t813));
    T32[((a1894 + 3) + (18432*blockIdx.x))] = ((a1900*t812) + (a1899*t813));
    T32[((a1894 + 10) + (18432*blockIdx.x))] = ((a1901*t814) - (a1902*t815));
    T32[((a1894 + 11) + (18432*blockIdx.x))] = ((a1902*t814) + (a1901*t815));
    t816 = (t806 - t811);
    t817 = (t807 + t810);
    t818 = (t806 + t811);
    t819 = (t807 - t810);
    a1903 = D3[(12 + a1889)];
    a1904 = D3[(13 + a1889)];
    a1905 = D3[(14 + a1889)];
    a1906 = D3[(15 + a1889)];
    T32[((a1894 + 6) + (18432*blockIdx.x))] = ((a1903*t816) - (a1904*t817));
    T32[((a1894 + 7) + (18432*blockIdx.x))] = ((a1904*t816) + (a1903*t817));
    T32[((a1894 + 14) + (18432*blockIdx.x))] = ((a1905*t818) - (a1906*t819));
    T32[((a1894 + 15) + (18432*blockIdx.x))] = ((a1906*t818) + (a1905*t819));
    __syncthreads();
    if( threadIdx.x <= 767 ) {
        double s618, s619, s620, s621, s622, s623, s624, s625, 
                s626, s627, s628, s629, s630, s631, s632, s633, 
                s634, s635, s636, s637, s638, s639, s640, s641, 
                s642, s643, s644, s645, s646, s647, s648, s649, 
                s650, s651, s652, s653, s654, s655, s656, s657, 
                s658, s659, s660, s661, s662, s663, s664, s665, 
                s666, s667, s668, s669, s670, s671, s672, s673, 
                t1028, t1029, t1030, t1031, t1032, t1033, t1034, t1035, 
                t1036, t1037, t1038, t1039, t1040, t1041, t1042, t1043, 
                t1044, t1045, t1046, t1047, t1048, t1049, t1050, t1051, 
                t1052, t1053, t1054, t1055, t1056, t1057, t1058, t1059, 
                t1060, t1061, t1062, t1063, t1064, t1065, t1066, t1067, 
                t1068, t1069, t1070, t1071, t1072, t1073, t1074, t1075;
        int a2476, a2477, a2478, a2479, a2480, a2481;
        a2476 = (threadIdx.x / 128);
        a2477 = (threadIdx.x % 128);
        a2478 = (a2477 / 8);
        a2479 = (a2477 % 8);
        a2480 = ((3072*a2476) + (192*a2478) + (2*a2479));
        s618 = T32[(a2480 + (18432*blockIdx.x))];
        s619 = T32[((a2480 + 1) + (18432*blockIdx.x))];
        s620 = T32[((a2480 + 64) + (18432*blockIdx.x))];
        s621 = T32[((a2480 + 65) + (18432*blockIdx.x))];
        s622 = T32[((a2480 + 128) + (18432*blockIdx.x))];
        s623 = T32[((a2480 + 129) + (18432*blockIdx.x))];
        t1028 = (s620 + s622);
        t1029 = (s621 + s623);
        s624 = (s618 + t1028);
        s625 = (s619 + t1029);
        s626 = (s618 - (0.5*t1028));
        s627 = (s619 - (0.5*t1029));
        s628 = (0.8660254037844386*(s621 - s623));
        s629 = (0.8660254037844386*(s620 - s622));
        t1030 = (s626 - s628);
        t1031 = (s627 + s629);
        t1032 = (s626 + s628);
        t1033 = (s627 - s629);
        s630 = T32[((a2480 + 16) + (18432*blockIdx.x))];
        s631 = T32[((a2480 + 17) + (18432*blockIdx.x))];
        s632 = T32[((a2480 + 80) + (18432*blockIdx.x))];
        s633 = T32[((a2480 + 81) + (18432*blockIdx.x))];
        s634 = T32[((a2480 + 144) + (18432*blockIdx.x))];
        s635 = T32[((a2480 + 145) + (18432*blockIdx.x))];
        t1034 = (s632 + s634);
        t1035 = (s633 + s635);
        s636 = (s630 + t1034);
        s637 = (s631 + t1035);
        s638 = (s630 - (0.5*t1034));
        s639 = (s631 - (0.5*t1035));
        s640 = (0.8660254037844386*(s633 - s635));
        s641 = (0.8660254037844386*(s632 - s634));
        t1036 = (s638 - s640);
        t1037 = (s639 + s641);
        t1038 = (s638 + s640);
        t1039 = (s639 - s641);
        s642 = ((0.8660254037844386*t1036) - (0.5*t1037));
        s643 = ((0.5*t1036) + (0.8660254037844386*t1037));
        s644 = ((0.5*t1038) - (0.8660254037844386*t1039));
        s645 = ((0.8660254037844386*t1038) + (0.5*t1039));
        s646 = T32[((a2480 + 32) + (18432*blockIdx.x))];
        s647 = T32[((a2480 + 33) + (18432*blockIdx.x))];
        s648 = T32[((a2480 + 96) + (18432*blockIdx.x))];
        s649 = T32[((a2480 + 97) + (18432*blockIdx.x))];
        s650 = T32[((a2480 + 160) + (18432*blockIdx.x))];
        s651 = T32[((a2480 + 161) + (18432*blockIdx.x))];
        t1040 = (s648 + s650);
        t1041 = (s649 + s651);
        s652 = (s646 + t1040);
        s653 = (s647 + t1041);
        s654 = (s646 - (0.5*t1040));
        s655 = (s647 - (0.5*t1041));
        s656 = (0.8660254037844386*(s649 - s651));
        s657 = (0.8660254037844386*(s648 - s650));
        t1042 = (s654 - s656);
        t1043 = (s655 + s657);
        t1044 = (s654 + s656);
        t1045 = (s655 - s657);
        s658 = ((0.5*t1042) - (0.8660254037844386*t1043));
        s659 = ((0.8660254037844386*t1042) + (0.5*t1043));
        s660 = ((0.5*t1044) + (0.8660254037844386*t1045));
        s661 = ((0.8660254037844386*t1044) - (0.5*t1045));
        s662 = T32[((a2480 + 48) + (18432*blockIdx.x))];
        s663 = T32[((a2480 + 49) + (18432*blockIdx.x))];
        s664 = T32[((a2480 + 112) + (18432*blockIdx.x))];
        s665 = T32[((a2480 + 113) + (18432*blockIdx.x))];
        s666 = T32[((a2480 + 176) + (18432*blockIdx.x))];
        s667 = T32[((a2480 + 177) + (18432*blockIdx.x))];
        t1046 = (s664 + s666);
        t1047 = (s665 + s667);
        s668 = (s662 + t1046);
        s669 = (s663 + t1047);
        s670 = (s662 - (0.5*t1046));
        s671 = (s663 - (0.5*t1047));
        s672 = (0.8660254037844386*(s665 - s667));
        s673 = (0.8660254037844386*(s664 - s666));
        t1048 = (s670 - s672);
        t1049 = (s671 + s673);
        t1050 = (s670 + s672);
        t1051 = (s671 - s673);
        t1052 = (s624 + s652);
        t1053 = (s625 + s653);
        t1054 = (s624 - s652);
        t1055 = (s625 - s653);
        t1056 = (s636 + s668);
        t1057 = (s637 + s669);
        t1058 = (s636 - s668);
        t1059 = (s637 - s669);
        a2481 = ((2*blockIdx.x) + (9408*a2479) + (1568*a2476) + (98*a2478));
        P2[a2481] = (t1052 + t1056);
        P2[(a2481 + 1)] = (t1053 + t1057);
        P2[(a2481 + 451584)] = (t1052 - t1056);
        P2[(a2481 + 451585)] = (t1053 - t1057);
        P2[(a2481 + 225792)] = (t1054 - t1059);
        P2[(a2481 + 225793)] = (t1055 + t1058);
        P2[(a2481 + 677376)] = (t1054 + t1059);
        P2[(a2481 + 677377)] = (t1055 - t1058);
        t1060 = (t1030 + s658);
        t1061 = (t1031 + s659);
        t1062 = (t1030 - s658);
        t1063 = (t1031 - s659);
        t1064 = (s642 - t1049);
        t1065 = (s643 + t1048);
        t1066 = (s642 + t1049);
        t1067 = (s643 - t1048);
        P2[(a2481 + 75264)] = (t1060 + t1064);
        P2[(a2481 + 75265)] = (t1061 + t1065);
        P2[(a2481 + 526848)] = (t1060 - t1064);
        P2[(a2481 + 526849)] = (t1061 - t1065);
        P2[(a2481 + 301056)] = (t1062 - t1067);
        P2[(a2481 + 301057)] = (t1063 + t1066);
        P2[(a2481 + 752640)] = (t1062 + t1067);
        P2[(a2481 + 752641)] = (t1063 - t1066);
        t1068 = (t1032 - s660);
        t1069 = (t1033 + s661);
        t1070 = (t1032 + s660);
        t1071 = (t1033 - s661);
        t1072 = (s644 - t1050);
        t1073 = (s645 - t1051);
        t1074 = (s644 + t1050);
        t1075 = (s645 + t1051);
        P2[(a2481 + 150528)] = (t1068 + t1072);
        P2[(a2481 + 150529)] = (t1069 + t1073);
        P2[(a2481 + 602112)] = (t1068 - t1072);
        P2[(a2481 + 602113)] = (t1069 - t1073);
        P2[(a2481 + 376320)] = (t1070 - t1075);
        P2[(a2481 + 376321)] = (t1071 + t1074);
        P2[(a2481 + 827904)] = (t1070 + t1075);
        P2[(a2481 + 827905)] = (t1071 - t1074);
    }
    __syncthreads();
}

__global__ void ker_fftx_imdprdft_96x96x962(double  *Y) {
    if ((((threadIdx.x % 12) == 0))) {
        double s776, s777, s778, s779, s780, s781, s782, s783, 
                s784, s785, s786, s787, s788, s789, s790, s791, 
                s792, s793, s794, s795, s796, s797, s798, s799, 
                s800, s801, s802, s803, t1138, t1139, t1140, t1141, 
                t1142, t1143, t1144, t1145, t1146, t1147, t1148, t1149, 
                t1150, t1151;
        int a2629, a2630, a2631;
        a2629 = (threadIdx.x / 12);
        a2630 = ((9408*blockIdx.x) + (98*a2629));
        s776 = P2[a2630];
        s777 = P2[(a2630 + 96)];
        s778 = (s776 + s777);
        s779 = (s776 - s777);
        s780 = (2.0*P2[(a2630 + 48)]);
        s781 = (2.0*P2[(a2630 + 49)]);
        s782 = (s778 + s780);
        s783 = (s778 - s780);
        s784 = (s779 - s781);
        s785 = (s779 + s781);
        s786 = P2[(a2630 + 16)];
        s787 = P2[(a2630 + 17)];
        s788 = P2[(a2630 + 80)];
        s789 = P2[(a2630 + 81)];
        t1138 = (s786 + s788);
        t1139 = (s787 - s789);
        t1140 = (s786 - s788);
        t1141 = (s787 + s789);
        s790 = P2[(a2630 + 64)];
        s791 = P2[(a2630 + 65)];
        s792 = P2[(a2630 + 32)];
        s793 = P2[(a2630 + 33)];
        t1142 = (s790 + s792);
        t1143 = (s791 - s793);
        t1144 = (s790 - s792);
        t1145 = (s791 + s793);
        t1146 = (t1138 + t1142);
        t1147 = (t1138 - t1142);
        t1148 = (t1139 - t1143);
        s794 = ((0.5*t1147) - (0.8660254037844386*t1148));
        t1149 = (t1140 - t1145);
        t1150 = (t1141 + t1144);
        t1151 = (t1141 - t1144);
        s795 = ((0.8660254037844386*t1149) - (0.5*t1150));
        s796 = (s782 - t1146);
        s797 = (1.7320508075688772*(t1139 + t1143));
        a2631 = (120*a2629);
        T61[(a2631 + (11520*blockIdx.x))] = (s782 + (2.0*t1146));
        T61[((a2631 + 40) + (11520*blockIdx.x))] = (s796 - s797);
        T61[((a2631 + 80) + (11520*blockIdx.x))] = (s796 + s797);
        s798 = (s784 - s795);
        s799 = ((0.8660254037844386*t1149) + (1.4999999999999998*t1150));
        T61[((a2631 + 10) + (11520*blockIdx.x))] = (s784 + (2.0*s795));
        T61[((a2631 + 50) + (11520*blockIdx.x))] = (s798 - s799);
        T61[((a2631 + 90) + (11520*blockIdx.x))] = (s798 + s799);
        s800 = (s783 - s794);
        s801 = ((1.4999999999999998*t1147) + (0.8660254037844386*t1148));
        T61[((a2631 + 20) + (11520*blockIdx.x))] = (s783 + (2.0*s794));
        T61[((a2631 + 60) + (11520*blockIdx.x))] = (s800 - s801);
        T61[((a2631 + 100) + (11520*blockIdx.x))] = (s800 + s801);
        s802 = (s785 + t1151);
        s803 = (1.7320508075688772*(t1140 + t1145));
        T61[((a2631 + 30) + (11520*blockIdx.x))] = (s785 - (2.0*t1151));
        T61[((a2631 + 70) + (11520*blockIdx.x))] = (s802 - s803);
        T61[((a2631 + 110) + (11520*blockIdx.x))] = (s802 + s803);
    }
    if ((((threadIdx.x % 12) == 1))) {
        for(int i7 = 0; i7 <= 2; i7++) {
            double a3278, a3279, a3280, a3281, a3282, a3283, a3284, a3285, 
                    a3286, a3287, a3288, a3289, a3290, a3291, a3292, a3293, 
                    a3294, a3295, a3296, a3297, a3298, a3299, a3300, a3301, 
                    s1020, s1021, s1022, s1023, s1024, s1025, s1026, s1027, 
                    s1028, s1029, s1030, s1031, s1032, s1033, s1034, s1035, 
                    s1036, s1037, s1038, s1039, s1040, s1041, s1042, s1043, 
                    s1044, s1045, s1046, s1047, s1048, s1049, s1050, s1051, 
                    s1052, s1053, s1054, s1055, s1056, s1057, s1058, s1059, 
                    s1060, s1061, s1062, s1063, s1064, s1065, s1066, s1067, 
                    s1068, s1069, s1070, s1071, s1072, s1073, s1074, s1075, 
                    t1384, t1385, t1386, t1387, t1388, t1389, t1390, t1391, 
                    t1392, t1393, t1394, t1395, t1396, t1397, t1398, t1399, 
                    t1400, t1401, t1402, t1403, t1404, t1405, t1406, t1407, 
                    t1408, t1409, t1410, t1411, t1412, t1413, t1414, t1415, 
                    t1416, t1417, t1418, t1419, t1420, t1421, t1422, t1423, 
                    t1424, t1425, t1426, t1427, t1428, t1429, t1430, t1431, 
                    t1432, t1433, t1434, t1435, t1436, t1437, t1438, t1439, 
                    t1440, t1441, t1442, t1443, t1444, t1445, t1446, t1447, 
                    t1448, t1449, t1450, t1451, t1452, t1453, t1454, t1455;
            int a3275, a3276, a3277, b499, b500, b501, b502;
            a3275 = (2*i7);
            a3276 = (threadIdx.x / 12);
            b499 = ((9408*blockIdx.x) + (98*a3276));
            b500 = (b499 + a3275);
            s1020 = P2[(b500 + 2)];
            s1021 = P2[(b500 + 3)];
            s1022 = P2[(b500 + 66)];
            s1023 = P2[(b500 + 67)];
            b501 = (b499 - a3275);
            s1024 = P2[(b501 + 62)];
            s1025 = P2[(b501 + 63)];
            t1384 = (s1022 + s1024);
            t1385 = (s1023 - s1025);
            s1026 = (s1020 + t1384);
            s1027 = (s1021 + t1385);
            s1028 = (s1020 - (0.5*t1384));
            s1029 = (s1021 - (0.5*t1385));
            s1030 = (0.8660254037844386*(s1023 + s1025));
            s1031 = (0.8660254037844386*(s1022 - s1024));
            t1386 = (s1028 - s1030);
            t1387 = (s1029 + s1031);
            t1388 = (s1028 + s1030);
            t1389 = (s1029 - s1031);
            s1032 = P2[(b500 + 18)];
            s1033 = P2[(b500 + 19)];
            s1034 = P2[(b500 + 82)];
            s1035 = P2[(b500 + 83)];
            s1036 = P2[(b501 + 46)];
            s1037 = P2[(b501 + 47)];
            t1390 = (s1034 + s1036);
            t1391 = (s1035 - s1037);
            s1038 = (s1032 + t1390);
            s1039 = (s1033 + t1391);
            s1040 = (s1032 - (0.5*t1390));
            s1041 = (s1033 - (0.5*t1391));
            s1042 = (0.8660254037844386*(s1035 + s1037));
            s1043 = (0.8660254037844386*(s1034 - s1036));
            t1392 = (s1040 - s1042);
            t1393 = (s1041 + s1043);
            t1394 = (s1040 + s1042);
            t1395 = (s1041 - s1043);
            s1044 = ((0.8660254037844386*t1392) - (0.5*t1393));
            s1045 = ((0.5*t1392) + (0.8660254037844386*t1393));
            s1046 = ((0.5*t1394) - (0.8660254037844386*t1395));
            s1047 = ((0.8660254037844386*t1394) + (0.5*t1395));
            s1048 = P2[(b500 + 34)];
            s1049 = P2[(b500 + 35)];
            s1050 = P2[(b501 + 94)];
            s1051 = P2[(b501 + 95)];
            s1052 = P2[(b501 + 30)];
            s1053 = P2[(b501 + 31)];
            t1396 = (s1050 + s1052);
            t1397 = (s1051 + s1053);
            s1054 = (s1048 + t1396);
            s1055 = (s1049 - t1397);
            s1056 = (s1048 - (0.5*t1396));
            s1057 = (s1049 + (0.5*t1397));
            s1058 = (0.8660254037844386*(s1053 - s1051));
            s1059 = (0.8660254037844386*(s1050 - s1052));
            t1398 = (s1056 - s1058);
            t1399 = (s1057 + s1059);
            t1400 = (s1056 + s1058);
            t1401 = (s1057 - s1059);
            s1060 = ((0.5*t1398) - (0.8660254037844386*t1399));
            s1061 = ((0.8660254037844386*t1398) + (0.5*t1399));
            s1062 = ((0.5*t1400) + (0.8660254037844386*t1401));
            s1063 = ((0.8660254037844386*t1400) - (0.5*t1401));
            s1064 = P2[(b500 + 50)];
            s1065 = P2[(b500 + 51)];
            s1066 = P2[(b501 + 78)];
            s1067 = P2[(b501 + 79)];
            s1068 = P2[(b501 + 14)];
            s1069 = P2[(b501 + 15)];
            t1402 = (s1066 + s1068);
            t1403 = (s1067 + s1069);
            s1070 = (s1064 + t1402);
            s1071 = (s1065 - t1403);
            s1072 = (s1064 - (0.5*t1402));
            s1073 = (s1065 + (0.5*t1403));
            s1074 = (0.8660254037844386*(s1069 - s1067));
            s1075 = (0.8660254037844386*(s1066 - s1068));
            t1404 = (s1072 - s1074);
            t1405 = (s1073 + s1075);
            t1406 = (s1072 + s1074);
            t1407 = (s1073 - s1075);
            t1408 = (s1026 + s1054);
            t1409 = (s1027 + s1055);
            t1410 = (s1026 - s1054);
            t1411 = (s1027 - s1055);
            t1412 = (s1038 + s1070);
            t1413 = (s1039 + s1071);
            t1414 = (s1038 - s1070);
            t1415 = (s1039 - s1071);
            t1416 = (t1408 + t1412);
            t1417 = (t1409 + t1413);
            t1418 = (t1408 - t1412);
            t1419 = (t1409 - t1413);
            a3277 = (24*i7);
            a3278 = D1[a3277];
            a3279 = D1[(a3277 + 1)];
            a3280 = D1[(a3277 + 2)];
            a3281 = D1[(a3277 + 3)];
            b502 = ((120*a3276) + a3275);
            T61[((b502 + 2) + (11520*blockIdx.x))] = ((a3278*t1416) - (a3279*t1417));
            T61[((b502 + 3) + (11520*blockIdx.x))] = ((a3279*t1416) + (a3278*t1417));
            T61[((b502 + 62) + (11520*blockIdx.x))] = ((a3280*t1418) - (a3281*t1419));
            T61[((b502 + 63) + (11520*blockIdx.x))] = ((a3281*t1418) + (a3280*t1419));
            t1420 = (t1410 - t1415);
            t1421 = (t1411 + t1414);
            t1422 = (t1410 + t1415);
            t1423 = (t1411 - t1414);
            a3282 = D1[(a3277 + 4)];
            a3283 = D1[(a3277 + 5)];
            a3284 = D1[(a3277 + 6)];
            a3285 = D1[(a3277 + 7)];
            T61[((b502 + 32) + (11520*blockIdx.x))] = ((a3282*t1420) - (a3283*t1421));
            T61[((b502 + 33) + (11520*blockIdx.x))] = ((a3283*t1420) + (a3282*t1421));
            T61[((b502 + 92) + (11520*blockIdx.x))] = ((a3284*t1422) - (a3285*t1423));
            T61[((b502 + 93) + (11520*blockIdx.x))] = ((a3285*t1422) + (a3284*t1423));
            t1424 = (t1386 + s1060);
            t1425 = (t1387 + s1061);
            t1426 = (t1386 - s1060);
            t1427 = (t1387 - s1061);
            t1428 = (s1044 - t1405);
            t1429 = (s1045 + t1404);
            t1430 = (s1044 + t1405);
            t1431 = (s1045 - t1404);
            t1432 = (t1424 + t1428);
            t1433 = (t1425 + t1429);
            t1434 = (t1424 - t1428);
            t1435 = (t1425 - t1429);
            a3286 = D1[(a3277 + 8)];
            a3287 = D1[(a3277 + 9)];
            a3288 = D1[(a3277 + 10)];
            a3289 = D1[(a3277 + 11)];
            T61[((b502 + 12) + (11520*blockIdx.x))] = ((a3286*t1432) - (a3287*t1433));
            T61[((b502 + 13) + (11520*blockIdx.x))] = ((a3287*t1432) + (a3286*t1433));
            T61[((b502 + 72) + (11520*blockIdx.x))] = ((a3288*t1434) - (a3289*t1435));
            T61[((b502 + 73) + (11520*blockIdx.x))] = ((a3289*t1434) + (a3288*t1435));
            t1436 = (t1426 - t1431);
            t1437 = (t1427 + t1430);
            t1438 = (t1426 + t1431);
            t1439 = (t1427 - t1430);
            a3290 = D1[(a3277 + 12)];
            a3291 = D1[(a3277 + 13)];
            a3292 = D1[(a3277 + 14)];
            a3293 = D1[(a3277 + 15)];
            T61[((b502 + 42) + (11520*blockIdx.x))] = ((a3290*t1436) - (a3291*t1437));
            T61[((b502 + 43) + (11520*blockIdx.x))] = ((a3291*t1436) + (a3290*t1437));
            T61[((b502 + 102) + (11520*blockIdx.x))] = ((a3292*t1438) - (a3293*t1439));
            T61[((b502 + 103) + (11520*blockIdx.x))] = ((a3293*t1438) + (a3292*t1439));
            t1440 = (t1388 - s1062);
            t1441 = (t1389 + s1063);
            t1442 = (t1388 + s1062);
            t1443 = (t1389 - s1063);
            t1444 = (s1046 - t1406);
            t1445 = (s1047 - t1407);
            t1446 = (s1046 + t1406);
            t1447 = (s1047 + t1407);
            t1448 = (t1440 + t1444);
            t1449 = (t1441 + t1445);
            t1450 = (t1440 - t1444);
            t1451 = (t1441 - t1445);
            a3294 = D1[(a3277 + 16)];
            a3295 = D1[(a3277 + 17)];
            a3296 = D1[(a3277 + 18)];
            a3297 = D1[(a3277 + 19)];
            T61[((b502 + 22) + (11520*blockIdx.x))] = ((a3294*t1448) - (a3295*t1449));
            T61[((b502 + 23) + (11520*blockIdx.x))] = ((a3295*t1448) + (a3294*t1449));
            T61[((b502 + 82) + (11520*blockIdx.x))] = ((a3296*t1450) - (a3297*t1451));
            T61[((b502 + 83) + (11520*blockIdx.x))] = ((a3297*t1450) + (a3296*t1451));
            t1452 = (t1442 - t1447);
            t1453 = (t1443 + t1446);
            t1454 = (t1442 + t1447);
            t1455 = (t1443 - t1446);
            a3298 = D1[(a3277 + 20)];
            a3299 = D1[(a3277 + 21)];
            a3300 = D1[(a3277 + 22)];
            a3301 = D1[(a3277 + 23)];
            T61[((b502 + 52) + (11520*blockIdx.x))] = ((a3298*t1452) - (a3299*t1453));
            T61[((b502 + 53) + (11520*blockIdx.x))] = ((a3299*t1452) + (a3298*t1453));
            T61[((b502 + 112) + (11520*blockIdx.x))] = ((a3300*t1454) - (a3301*t1455));
            T61[((b502 + 113) + (11520*blockIdx.x))] = ((a3301*t1454) + (a3300*t1455));
        }
    }
    if ((((threadIdx.x % 12) == 2))) {
        double a3473, a3474, a3475, a3476, a3478, a3479, a3480, a3481, 
                s1202, s1203, s1204, s1205, s1206, s1207, s1208, s1209, 
                s1210, s1211, s1212, s1213, s1214, s1215, s1216, s1217, 
                s1218, s1219, s1220, s1221, s1222, s1223, s1224, s1225, 
                s1226, s1227, s1228, s1229, s1230, s1231, t1522, t1523, 
                t1524, t1525, t1526, t1527, t1528, t1529, t1530, t1531;
        int a3472, a3477, b517;
        a3472 = (threadIdx.x / 12);
        b517 = ((9408*blockIdx.x) + (98*a3472));
        s1202 = P2[(b517 + 8)];
        s1203 = P2[(b517 + 9)];
        s1204 = P2[(b517 + 72)];
        s1205 = P2[(b517 + 73)];
        s1206 = P2[(b517 + 56)];
        s1207 = P2[(b517 + 57)];
        t1522 = (s1204 + s1206);
        t1523 = (s1205 - s1207);
        s1208 = (s1202 + t1522);
        s1209 = (s1203 + t1523);
        s1210 = (s1202 - (0.5*t1522));
        s1211 = (s1203 - (0.5*t1523));
        s1212 = (0.8660254037844386*(s1205 + s1207));
        s1213 = (0.8660254037844386*(s1204 - s1206));
        t1524 = (s1210 - s1212);
        t1525 = (s1211 + s1213);
        t1526 = (s1210 + s1212);
        t1527 = (s1211 - s1213);
        s1214 = ((0.96592582628906831*t1524) - (0.25881904510252079*t1525));
        s1215 = ((0.25881904510252079*t1524) + (0.96592582628906831*t1525));
        s1216 = ((0.8660254037844386*t1526) - (0.5*t1527));
        s1217 = ((0.5*t1526) + (0.8660254037844386*t1527));
        s1218 = P2[(b517 + 24)];
        s1219 = P2[(b517 + 25)];
        s1220 = P2[(b517 + 88)];
        s1221 = P2[(b517 + 89)];
        s1222 = P2[(b517 + 40)];
        s1223 = P2[(b517 + 41)];
        t1528 = (s1220 + s1222);
        t1529 = (s1221 - s1223);
        s1224 = (s1218 + t1528);
        s1225 = (s1219 + t1529);
        s1226 = (s1218 - (0.5*t1528));
        s1227 = (s1219 - (0.5*t1529));
        s1228 = (0.8660254037844386*(s1221 + s1223));
        s1229 = (0.8660254037844386*(s1220 - s1222));
        t1530 = (s1226 + s1228);
        t1531 = (s1227 - s1229);
        a3473 = (0.70710678118654757*(s1226 - s1228));
        a3474 = (0.70710678118654757*(s1227 + s1229));
        s1230 = (a3473 - a3474);
        s1231 = (a3473 + a3474);
        a3475 = (0.70710678118654757*(s1208 - s1224));
        a3476 = (0.70710678118654757*(s1209 + s1225));
        a3477 = (120*a3472);
        T61[((a3477 + 8) + (11520*blockIdx.x))] = (2.0*(s1208 + s1224));
        T61[((a3477 + 68) + (11520*blockIdx.x))] = -((2.0*(s1209 - s1225)));
        T61[((a3477 + 38) + (11520*blockIdx.x))] = (2.0*(a3475 - a3476));
        T61[((a3477 + 98) + (11520*blockIdx.x))] = -((2.0*(a3475 + a3476)));
        a3478 = (0.70710678118654757*(s1214 - s1230));
        a3479 = (0.70710678118654757*(s1215 + s1231));
        T61[((a3477 + 18) + (11520*blockIdx.x))] = (2.0*(s1214 + s1230));
        T61[((a3477 + 78) + (11520*blockIdx.x))] = -((2.0*(s1215 - s1231)));
        T61[((a3477 + 48) + (11520*blockIdx.x))] = (2.0*(a3478 - a3479));
        T61[((a3477 + 108) + (11520*blockIdx.x))] = -((2.0*(a3478 + a3479)));
        a3480 = (0.70710678118654757*(s1216 + t1531));
        a3481 = (0.70710678118654757*(s1217 + t1530));
        T61[((a3477 + 28) + (11520*blockIdx.x))] = (2.0*(s1216 - t1531));
        T61[((a3477 + 88) + (11520*blockIdx.x))] = -((2.0*(s1217 - t1530)));
        T61[((a3477 + 58) + (11520*blockIdx.x))] = (2.0*(a3480 - a3481));
        T61[((a3477 + 118) + (11520*blockIdx.x))] = -((2.0*(a3480 + a3481)));
    }
    __syncthreads();
    double a3611, a3612, s1312, s1313, s1314, s1315, s1316, s1317, 
            s1318, s1319, s1320, s1321, s1322, s1323, s1324, s1325, 
            s1326, s1327, s1328, s1329;
    int a3608, a3609, a3610, a3613;
    a3608 = (threadIdx.x / 12);
    a3609 = (threadIdx.x % 12);
    a3610 = ((120*a3608) + (10*a3609));
    s1312 = T61[(a3610 + (11520*blockIdx.x))];
    s1313 = T61[((a3610 + 8) + (11520*blockIdx.x))];
    s1314 = (s1312 + s1313);
    s1315 = (s1312 - s1313);
    s1316 = (2.0*T61[((a3610 + 4) + (11520*blockIdx.x))]);
    s1317 = (2.0*T61[((a3610 + 5) + (11520*blockIdx.x))]);
    s1318 = (s1314 + s1316);
    s1319 = (s1314 - s1316);
    s1320 = (s1315 - s1317);
    s1321 = (s1315 + s1317);
    s1322 = T61[((a3610 + 2) + (11520*blockIdx.x))];
    s1323 = T61[((a3610 + 3) + (11520*blockIdx.x))];
    s1324 = T61[((a3610 + 6) + (11520*blockIdx.x))];
    s1325 = T61[((a3610 + 7) + (11520*blockIdx.x))];
    a3611 = (0.70710678118654757*(s1322 - s1324));
    a3612 = (0.70710678118654757*(s1323 + s1325));
    s1326 = (2.0*(s1322 + s1324));
    s1327 = (2.0*(s1323 - s1325));
    s1328 = (2.0*(a3611 - a3612));
    s1329 = (2.0*(a3611 + a3612));
    a3613 = ((9216*blockIdx.x) + (96*a3608) + a3609);
    Y[a3613] = (s1318 + s1326);
    Y[(a3613 + 48)] = (s1318 - s1326);
    Y[(a3613 + 12)] = (s1320 + s1328);
    Y[(a3613 + 60)] = (s1320 - s1328);
    Y[(a3613 + 24)] = (s1319 - s1327);
    Y[(a3613 + 72)] = (s1319 + s1327);
    Y[(a3613 + 36)] = (s1321 - s1329);
    Y[(a3613 + 84)] = (s1321 + s1329);
    __syncthreads();
}

extern "C" {
void fftx_imdprdft_96x96x96(double  *Y, double  *X, double  *sym) {
    dim3 b543(1152, 1, 1), b544(1152, 1, 1), b545(1152, 1, 1), g1(49, 1, 1), g2(49, 1, 1), g3(96, 1, 1);
    ker_fftx_imdprdft_96x96x960<<<g1, b543>>>(X);
    ker_fftx_imdprdft_96x96x961<<<g2, b544>>>();
    ker_fftx_imdprdft_96x96x962<<<g3, b545>>>(Y);
}
}

extern "C" {
void destroy_fftx_imdprdft_96x96x96() {
    double  *hp1;
    cudaMemcpyFromSymbol(&(hp1), P1, sizeof(double  *));
    cudaFree(hp1);
    cudaMemcpyFromSymbol(&(hp1), P2, sizeof(double  *));
    cudaFree(hp1);
    cudaMemcpyFromSymbol(&(hp1), T3, sizeof(double  *));
    cudaFree(hp1);
    cudaMemcpyFromSymbol(&(hp1), T32, sizeof(double  *));
    cudaFree(hp1);
    cudaMemcpyFromSymbol(&(hp1), T61, sizeof(double  *));
    cudaFree(hp1);
}
}

extern "C" {
void init_fftx_imdprdft_96x96x96() {
    double  *hp1;
    cudaDeviceSetLimit(cudaLimitMallocHeapSize, 1073741824);
    cudaFuncSetCacheConfig(ker_fftx_imdprdft_96x96x960, cudaFuncCachePreferL1);
    cudaFuncSetCacheConfig(ker_fftx_imdprdft_96x96x961, cudaFuncCachePreferL1);
    cudaFuncSetCacheConfig(ker_fftx_imdprdft_96x96x962, cudaFuncCachePreferL1);
    cudaMalloc(((void  * *) &(hp1)), (sizeof(double )*903168));
    cudaMemcpyToSymbol(P1, &(hp1), sizeof(double  *));
    cudaMalloc(((void  * *) &(hp1)), (sizeof(double )*903168));
    cudaMemcpyToSymbol(P2, &(hp1), sizeof(double  *));
    cudaMalloc(((void  * *) &(hp1)), (sizeof(double )*903168));
    cudaMemcpyToSymbol(T3, &(hp1), sizeof(double  *));
    cudaMalloc(((void  * *) &(hp1)), (sizeof(double )*903168));
    cudaMemcpyToSymbol(T32, &(hp1), sizeof(double  *));
    cudaMalloc(((void  * *) &(hp1)), (sizeof(double )*1105920));
    cudaMemcpyToSymbol(T61, &(hp1), sizeof(double  *));
}
}
