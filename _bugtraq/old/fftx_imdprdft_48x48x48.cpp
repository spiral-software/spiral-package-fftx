/* RuleTree:
rt :=
TFCall_tag( TFCall(IMDPRDFT([ 48, 48, 48 ], 1), rec(
  fname := "fftx_imdprdft_48x48x48",
  params := [ sym ] )).withTags([ ASIMTKernelFlag(ASIMTGridDimX), ASIMTBlockDimY, ASIMTBlockDimX ]),
  IMDPRDFT_tSPL_RowCol_SIMT( IMDPRDFT([ 48, 48, 48 ], 1).withTags([ ASIMTKernelFlag(ASIMTGridDimX), ASIMTBlockDimY, ASIMTBlockDimX ]),
    IxA_SIMT( TTensorI(TTensorI(IPRDFT(48, 1), 48, APar, APar), 48, APar, APar).withTags([ ASIMTKernelFlag(ASIMTGridDimX), ASIMTBlockDimY, ASIMTBlockDimX ]),
      IxA_SIMT( TTensorI(IPRDFT(48, 1), 48, APar, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
        IPRDFT1_CT( IPRDFT(48, 1).withTags([ ASIMTBlockDimX ]),
          IPRDFT1_CT( IPRDFT(8, 1),
            IPRDFT1_CT( IPRDFT(4, 1),
              IPRDFT1_Base2( IPRDFT(2, 1) ),
              DFT_Base( DFT(2, 1) ),
              IPRDFT1_Base2( IPRDFT(2, 1) ),
              IPRDFT2_Base2( IPRDFT2(2, 1) ) ),
            DFT_CT( DFT(4, 1),
              DFT_Base( DFT(2, 1) ),
              DFT_Base( DFT(2, 1) ) ),
            IPRDFT1_Base2( IPRDFT(2, 1) ),
            IPRDFT2_CT( IPRDFT2(4, 1),
              DFT_Base( DFT(2, 1) ),
              IPRDFT2_Base2( IPRDFT2(2, 1) ) ) ),
          DFT_CT( DFT(8, 1),
            DFT_CT( DFT(4, 1),
              DFT_Base( DFT(2, 1) ),
              DFT_Base( DFT(2, 1) ) ),
            DFT_Base( DFT(2, 1) ) ),
          IPRDFT1_CT( IPRDFT(6, 1),
            IPRDFT1_Base2( IPRDFT(2, 1) ),
            DFT_Base( DFT(2, 1) ),
            IPRDFT_PD( IPRDFT(3, 1) ) ),
          IPRDFT2_CT( IPRDFT2(8, 1),
            DFT_CT( DFT(4, 1),
              DFT_Base( DFT(2, 1) ),
              DFT_Base( DFT(2, 1) ) ),
            IPRDFT2_Base2( IPRDFT2(2, 1) ) ) ) ) ),
    AxI_SIMT( TTensorI(MDDFT([ 48, 48 ], 1, false), 25, AVec, AVec).withTags([ ASIMTKernelFlag(ASIMTGridDimX), ASIMTBlockDimY, ASIMTBlockDimX ]),
      MDDFT_tSPL_Pease_SIMT( MDDFT([ 48, 48 ], 1, false).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
        TCompose_tag( TCompose([ TTensorI(DFT(48, 1), 48, AVec, APar), TTensorI(DFT(48, 1), 48, AVec, APar) ]).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
          L_IxA_SIMT( TTensorI(DFT(48, 1), 48, AVec, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
            TCompose_tag( TCompose([ TL(96, 48, 1, 24), TTensorI(TCompose([ TL(1152, 48, 1, 1), TTensorI(DFT(48, 1), 24, APar, APar) ]), 2, APar, APar) ]).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
              L_SIMT( TL(96, 48, 1, 24).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]) ),
              IxA_SIMT( TTensorI(TCompose([ TL(1152, 48, 1, 1), TTensorI(DFT(48, 1), 24, APar, APar) ]), 2, APar, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
                TCompose_tag( TCompose([ TL(1152, 48, 1, 1), TTensorI(DFT(48, 1), 24, APar, APar) ]).withTags([ ASIMTBlockDimX ]),
                  L_SIMT( TL(1152, 48, 1, 1).withTags([ ASIMTBlockDimX ]) ),
                  IxA_SIMT( TTensorI(DFT(48, 1), 24, APar, APar).withTags([ ASIMTBlockDimX ]),
                    DFT_CT( DFT(48, 1),
                      DFT_CT( DFT(8, 1),
                        DFT_CT( DFT(4, 1),
                          DFT_Base( DFT(2, 1) ),
                          DFT_Base( DFT(2, 1) ) ),
                        DFT_Base( DFT(2, 1) ) ),
                      DFT_CT( DFT(6, 1),
                        DFT_PD( DFT(3, 1) ),
                        DFT_Base( DFT(2, 1) ) ) ) ) ) ) ) ),
          L_IxA_SIMT( TTensorI(DFT(48, 1), 48, AVec, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
            TCompose_tag( TCompose([ TL(96, 48, 1, 24), TTensorI(TCompose([ TL(1152, 48, 1, 1), TTensorI(DFT(48, 1), 24, APar, APar) ]), 2, APar, APar) ]).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
              L_SIMT( TL(96, 48, 1, 24).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]) ),
              IxA_SIMT( TTensorI(TCompose([ TL(1152, 48, 1, 1), TTensorI(DFT(48, 1), 24, APar, APar) ]), 2, APar, APar).withTags([ ASIMTBlockDimY, ASIMTBlockDimX ]),
                TCompose_tag( TCompose([ TL(1152, 48, 1, 1), TTensorI(DFT(48, 1), 24, APar, APar) ]).withTags([ ASIMTBlockDimX ]),
                  L_SIMT( TL(1152, 48, 1, 1).withTags([ ASIMTBlockDimX ]) ),
                  IxA_SIMT( TTensorI(DFT(48, 1), 24, APar, APar).withTags([ ASIMTBlockDimX ]),
                    DFT_CT( DFT(48, 1),
                      DFT_CT( DFT(8, 1),
                        DFT_CT( DFT(4, 1),
                          DFT_Base( DFT(2, 1) ),
                          DFT_Base( DFT(2, 1) ) ),
                        DFT_Base( DFT(2, 1) ) ),
                      DFT_CT( DFT(6, 1),
                        DFT_PD( DFT(3, 1) ),
                        DFT_Base( DFT(2, 1) ) ) ) ) ) ) ) ) ) ) ) ) )
;
*/


/*
 * This code was generated by Spiral 8.3.0, www.spiral.net
 */

#include "hip/hip_runtime.h"
__device__ double  *P1, *P2;
 __device__ double D5[64] = {1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      0.96592582628906831, 0.25881904510252079, 0.8660254037844386, 0.5, 
      0.92387953251128674, 0.38268343236508978, 0.79335334029123517, 0.60876142900872066, 
      0.8660254037844386, 0.5, 0.5, 0.8660254037844386, 
      0.70710678118654757, 0.70710678118654757, 0.25881904510252079, 0.96592582628906831, 
      0.70710678118654757, 0.70710678118654757, 0.0, 1.0, 
      0.38268343236508978, 0.92387953251128674, (-0.38268343236508978), 0.92387953251128674, 
      0.5, 0.8660254037844386, (-0.5), 0.8660254037844386, 
      0.0, 1.0, (-0.8660254037844386), 0.5, 
      0.25881904510252079, 0.96592582628906831, (-0.8660254037844386), 0.5, 
      (-0.38268343236508978), 0.92387953251128674, (-0.99144486137381038), (-0.1305261922200516), 
      0.0, 1.0, (-1.0), 0.0, 
      (-0.70710678118654757), 0.70710678118654757, (-0.70710678118654757), (-0.70710678118654757), 
      (-0.25881904510252079), 0.96592582628906831, (-0.8660254037844386), (-0.5), 
      (-0.92387953251128674), 0.38268343236508978, (-0.1305261922200516), (-0.99144486137381038)};

 __device__ double D4[32] = {1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 0.99144486137381038, 0.1305261922200516, 
      1.0, 0.0, 0.96592582628906831, 0.25881904510252079, 
      1.0, 0.0, 0.92387953251128674, 0.38268343236508978, 
      1.0, 0.0, 0.8660254037844386, 0.5, 
      1.0, 0.0, 0.79335334029123517, 0.60876142900872066, 
      1.0, 0.0, 0.70710678118654757, 0.70710678118654757, 
      1.0, 0.0, 0.60876142900872066, 0.79335334029123517};

 __constant__ double D1[32] = {1.0, 0.0, 0.8660254037844386, 0.5, 
      0.96592582628906831, 0.25881904510252079, 0.70710678118654757, 0.70710678118654757, 
      0.99144486137381038, 0.1305261922200516, 0.79335334029123517, 0.60876142900872066, 
      0.92387953251128674, 0.38268343236508978, 0.60876142900872066, 0.79335334029123517, 
      1.0, 0.0, 0.5, 0.8660254037844386, 
      0.8660254037844386, 0.5, 0.0, 1.0, 
      0.96592582628906831, 0.25881904510252079, 0.25881904510252079, 0.96592582628906831, 
      0.70710678118654757, 0.70710678118654757, (-0.25881904510252079), 0.96592582628906831};


__global__ void ker_fftx_imdprdft_48x48x480(double  *X) {
    __shared__ double T3[4608];
    double a503, a504, a507, a508, a509, a510, a511, a512, 
            a513, a514, a515, a516, s109, s110, s111, s112, 
            s113, s114, s115, s116, s117, s118, s119, s120, 
            s121, s122, s123, s124, s125, s126, s127, s128, 
            s129, s130, s131, s132, s133, s134, s135, s136, 
            t235, t236, t237, t238, t239, t240, t241, t242, 
            t243, t244, t245, t246, t247, t248, t249, t250, 
            t251, t252, t253, t254, t255, t256, t257, t258;
    int a497, a498, a499, a500, a501, a502, a505, a506;
    a497 = (threadIdx.x / 192);
    a498 = (threadIdx.x % 192);
    a499 = (a498 / 8);
    a500 = (a498 % 8);
    a501 = ((2*blockIdx.x) + (57600*a497) + (2400*a499) + (50*a500));
    s109 = X[a501];
    s110 = X[(a501 + 1)];
    s111 = X[(a501 + 1200)];
    s112 = X[(a501 + 1201)];
    t235 = (s109 + s111);
    t236 = (s110 + s112);
    t237 = (s109 - s111);
    t238 = (s110 - s112);
    s113 = X[(a501 + 400)];
    s114 = X[(a501 + 401)];
    s115 = X[(a501 + 1600)];
    s116 = X[(a501 + 1601)];
    t239 = (s113 + s115);
    t240 = (s114 + s116);
    t241 = (s113 - s115);
    t242 = (s114 - s116);
    s117 = ((0.5*t241) - (0.8660254037844386*t242));
    s118 = ((0.8660254037844386*t241) + (0.5*t242));
    s119 = X[(a501 + 800)];
    s120 = X[(a501 + 801)];
    s121 = X[(a501 + 2000)];
    s122 = X[(a501 + 2001)];
    t243 = (s119 + s121);
    t244 = (s120 + s122);
    t245 = (s119 - s121);
    t246 = (s120 - s122);
    s123 = ((0.5*t245) + (0.8660254037844386*t246));
    s124 = ((0.8660254037844386*t245) - (0.5*t246));
    t247 = (t239 + t243);
    t248 = (t240 + t244);
    s125 = (t235 + t247);
    s126 = (t236 + t248);
    s127 = (t235 - (0.5*t247));
    s128 = (t236 - (0.5*t248));
    s129 = (0.8660254037844386*(t240 - t244));
    s130 = (0.8660254037844386*(t239 - t243));
    a502 = (4*a500);
    a503 = D4[a502];
    a504 = D4[(a502 + 1)];
    a505 = ((2304*a497) + (96*a499) + (12*a500));
    T3[a505] = ((a503*s125) - (a504*s126));
    T3[(a505 + 1)] = ((a504*s125) + (a503*s126));
    t249 = (s127 - s129);
    t250 = (s128 + s130);
    t251 = (s127 + s129);
    t252 = (s128 - s130);
    a506 = (8*a500);
    a507 = D5[a506];
    a508 = D5[(a506 + 1)];
    a509 = D5[(a506 + 2)];
    a510 = D5[(a506 + 3)];
    T3[(a505 + 4)] = ((a507*t249) - (a508*t250));
    T3[(a505 + 5)] = ((a508*t249) + (a507*t250));
    T3[(a505 + 8)] = ((a509*t251) - (a510*t252));
    T3[(a505 + 9)] = ((a510*t251) + (a509*t252));
    t253 = (s117 - s123);
    t254 = (s118 + s124);
    s131 = (t237 + t253);
    s132 = (t238 + t254);
    s133 = (t237 - (0.5*t253));
    s134 = (t238 - (0.5*t254));
    s135 = (0.8660254037844386*(s118 - s124));
    s136 = (0.8660254037844386*(s117 + s123));
    a511 = D4[(a502 + 2)];
    a512 = D4[(3 + a502)];
    T3[(a505 + 2)] = ((a511*s131) - (a512*s132));
    T3[(a505 + 3)] = ((a512*s131) + (a511*s132));
    t255 = (s133 - s135);
    t256 = (s134 + s136);
    t257 = (s133 + s135);
    t258 = (s134 - s136);
    a513 = D5[(a506 + 4)];
    a514 = D5[(5 + a506)];
    a515 = D5[(6 + a506)];
    a516 = D5[(7 + a506)];
    T3[(a505 + 6)] = ((a513*t255) - (a514*t256));
    T3[(a505 + 7)] = ((a514*t255) + (a513*t256));
    T3[(a505 + 10)] = ((a515*t257) - (a516*t258));
    T3[(a505 + 11)] = ((a516*t257) + (a515*t258));
    __syncthreads();
    if( threadIdx.x <= 287 ) {
        double a891, a892, a893, a894, s197, s198, s199, s200, 
                s201, s202, s203, s204, s205, s206, s207, s208, 
                s209, s210, s211, s212, s213, s214, s215, s216, 
                t383, t384, t385, t387, t388, t389, t390, t391, 
                t392, t393, t394, t395, t396, t397, t398, t399, 
                t400, t401, t402, t403, t404, t405, t406, t407, 
                t408, t409, t410, t411;
        int a886, a887, a888, a889, a890, a895;
        a886 = (threadIdx.x / 144);
        a887 = (threadIdx.x % 144);
        a888 = (a887 / 6);
        a889 = (a887 % 6);
        a890 = ((2304*a886) + (96*a888) + (2*a889));
        s197 = T3[a890];
        s198 = T3[(a890 + 1)];
        s199 = T3[(a890 + 48)];
        s200 = T3[(a890 + 49)];
        t383 = (s197 + s199);
        t384 = (s198 + s200);
        t385 = (s197 - s199);
        t387 = (s198 - s200);
        s201 = T3[(a890 + 12)];
        s202 = T3[(a890 + 13)];
        s203 = T3[(a890 + 60)];
        s204 = T3[(a890 + 61)];
        t388 = (s201 + s203);
        t389 = (s202 + s204);
        a891 = (0.70710678118654757*(s201 - s203));
        a892 = (0.70710678118654757*(s202 - s204));
        s205 = (a891 - a892);
        s206 = (a891 + a892);
        s207 = T3[(a890 + 24)];
        s208 = T3[(a890 + 25)];
        s209 = T3[(a890 + 72)];
        s210 = T3[(a890 + 73)];
        t390 = (s207 + s209);
        t391 = (s208 + s210);
        t392 = (s207 - s209);
        t393 = (s208 - s210);
        s211 = T3[(a890 + 36)];
        s212 = T3[(a890 + 37)];
        s213 = T3[(a890 + 84)];
        s214 = T3[(a890 + 85)];
        t394 = (s211 + s213);
        t395 = (s212 + s214);
        a893 = (0.70710678118654757*(s211 - s213));
        a894 = (0.70710678118654757*(s212 - s214));
        s215 = (a893 + a894);
        s216 = (a893 - a894);
        t396 = (t383 + t390);
        t397 = (t384 + t391);
        t398 = (t383 - t390);
        t399 = (t384 - t391);
        t400 = (t388 + t394);
        t401 = (t389 + t395);
        t402 = (t388 - t394);
        t403 = (t389 - t395);
        a895 = ((4608*blockIdx.x) + (96*a889) + (48*a886) + (2*a888));
        P1[a895] = (t396 + t400);
        P1[(a895 + 1)] = (t397 + t401);
        P1[(a895 + 2304)] = (t396 - t400);
        P1[(a895 + 2305)] = (t397 - t401);
        P1[(a895 + 1152)] = (t398 - t403);
        P1[(a895 + 1153)] = (t399 + t402);
        P1[(a895 + 3456)] = (t398 + t403);
        P1[(a895 + 3457)] = (t399 - t402);
        t404 = (t385 - t393);
        t405 = (t387 + t392);
        t406 = (t385 + t393);
        t407 = (t387 - t392);
        t408 = (s205 - s215);
        t409 = (s206 + s216);
        t410 = (s205 + s215);
        t411 = (s206 - s216);
        P1[(a895 + 576)] = (t404 + t408);
        P1[(a895 + 577)] = (t405 + t409);
        P1[(a895 + 2880)] = (t404 - t408);
        P1[(a895 + 2881)] = (t405 - t409);
        P1[(a895 + 1728)] = (t406 - t411);
        P1[(a895 + 1729)] = (t407 + t410);
        P1[(a895 + 4032)] = (t406 + t411);
        P1[(a895 + 4033)] = (t407 - t410);
    }
    __syncthreads();
}

__global__ void ker_fftx_imdprdft_48x48x481() {
    __shared__ double T28[4608];
    double a1395, a1396, a1399, a1400, a1401, a1402, a1403, a1404, 
            a1405, a1406, a1407, a1408, s325, s326, s327, s328, 
            s329, s330, s331, s332, s333, s334, s335, s336, 
            s337, s338, s339, s340, s341, s342, s343, s344, 
            s345, s346, s347, s348, s349, s350, s351, s352, 
            t492, t493, t494, t495, t496, t497, t498, t499, 
            t500, t501, t502, t503, t504, t505, t506, t507, 
            t508, t509, t510, t511, t512, t513, t514, t515;
    int a1389, a1390, a1391, a1392, a1393, a1394, a1397, a1398;
    a1389 = (2304*(threadIdx.x / 192));
    a1390 = (threadIdx.x % 192);
    a1391 = (96*(a1390 / 8));
    a1392 = (a1390 % 8);
    a1393 = ((4608*blockIdx.x) + a1389 + a1391 + (2*a1392));
    s325 = P1[a1393];
    s326 = P1[(a1393 + 1)];
    s327 = P1[(a1393 + 48)];
    s328 = P1[(a1393 + 49)];
    t492 = (s325 + s327);
    t493 = (s326 + s328);
    t494 = (s325 - s327);
    t495 = (s326 - s328);
    s329 = P1[(a1393 + 16)];
    s330 = P1[(a1393 + 17)];
    s331 = P1[(a1393 + 64)];
    s332 = P1[(a1393 + 65)];
    t496 = (s329 + s331);
    t497 = (s330 + s332);
    t498 = (s329 - s331);
    t499 = (s330 - s332);
    s333 = ((0.5*t498) - (0.8660254037844386*t499));
    s334 = ((0.8660254037844386*t498) + (0.5*t499));
    s335 = P1[(a1393 + 32)];
    s336 = P1[(a1393 + 33)];
    s337 = P1[(a1393 + 80)];
    s338 = P1[(a1393 + 81)];
    t500 = (s335 + s337);
    t501 = (s336 + s338);
    t502 = (s335 - s337);
    t503 = (s336 - s338);
    s339 = ((0.5*t502) + (0.8660254037844386*t503));
    s340 = ((0.8660254037844386*t502) - (0.5*t503));
    t504 = (t496 + t500);
    t505 = (t497 + t501);
    s341 = (t492 + t504);
    s342 = (t493 + t505);
    s343 = (t492 - (0.5*t504));
    s344 = (t493 - (0.5*t505));
    s345 = (0.8660254037844386*(t497 - t501));
    s346 = (0.8660254037844386*(t496 - t500));
    a1394 = (4*a1392);
    a1395 = D4[a1394];
    a1396 = D4[(a1394 + 1)];
    a1397 = (a1389 + a1391 + (12*a1392));
    T28[a1397] = ((a1395*s341) - (a1396*s342));
    T28[(a1397 + 1)] = ((a1396*s341) + (a1395*s342));
    t506 = (s343 - s345);
    t507 = (s344 + s346);
    t508 = (s343 + s345);
    t509 = (s344 - s346);
    a1398 = (8*a1392);
    a1399 = D5[a1398];
    a1400 = D5[(a1398 + 1)];
    a1401 = D5[(a1398 + 2)];
    a1402 = D5[(a1398 + 3)];
    T28[(a1397 + 4)] = ((a1399*t506) - (a1400*t507));
    T28[(a1397 + 5)] = ((a1400*t506) + (a1399*t507));
    T28[(a1397 + 8)] = ((a1401*t508) - (a1402*t509));
    T28[(a1397 + 9)] = ((a1402*t508) + (a1401*t509));
    t510 = (s333 - s339);
    t511 = (s334 + s340);
    s347 = (t494 + t510);
    s348 = (t495 + t511);
    s349 = (t494 - (0.5*t510));
    s350 = (t495 - (0.5*t511));
    s351 = (0.8660254037844386*(s334 - s340));
    s352 = (0.8660254037844386*(s333 + s339));
    a1403 = D4[(a1394 + 2)];
    a1404 = D4[(3 + a1394)];
    T28[(a1397 + 2)] = ((a1403*s347) - (a1404*s348));
    T28[(a1397 + 3)] = ((a1404*s347) + (a1403*s348));
    t512 = (s349 - s351);
    t513 = (s350 + s352);
    t514 = (s349 + s351);
    t515 = (s350 - s352);
    a1405 = D5[(a1398 + 4)];
    a1406 = D5[(5 + a1398)];
    a1407 = D5[(6 + a1398)];
    a1408 = D5[(7 + a1398)];
    T28[(a1397 + 6)] = ((a1405*t512) - (a1406*t513));
    T28[(a1397 + 7)] = ((a1406*t512) + (a1405*t513));
    T28[(a1397 + 10)] = ((a1407*t514) - (a1408*t515));
    T28[(a1397 + 11)] = ((a1408*t514) + (a1407*t515));
    __syncthreads();
    if( threadIdx.x <= 287 ) {
        double a1783, a1784, a1785, a1786, s414, s415, s416, s417, 
                s418, s419, s420, s421, s422, s423, s424, s425, 
                s426, s427, s428, s429, s430, s431, s432, s433, 
                t640, t641, t642, t643, t644, t645, t646, t647, 
                t648, t649, t650, t651, t652, t653, t654, t655, 
                t656, t657, t658, t659, t660, t661, t662, t663, 
                t664, t665, t666, t667;
        int a1778, a1779, a1780, a1781, a1782, a1787;
        a1778 = (threadIdx.x / 144);
        a1779 = (threadIdx.x % 144);
        a1780 = (a1779 / 6);
        a1781 = (a1779 % 6);
        a1782 = ((2304*a1778) + (96*a1780) + (2*a1781));
        s414 = T28[a1782];
        s415 = T28[(a1782 + 1)];
        s416 = T28[(a1782 + 48)];
        s417 = T28[(a1782 + 49)];
        t640 = (s414 + s416);
        t641 = (s415 + s417);
        t642 = (s414 - s416);
        t643 = (s415 - s417);
        s418 = T28[(a1782 + 12)];
        s419 = T28[(a1782 + 13)];
        s420 = T28[(a1782 + 60)];
        s421 = T28[(a1782 + 61)];
        t644 = (s418 + s420);
        t645 = (s419 + s421);
        a1783 = (0.70710678118654757*(s418 - s420));
        a1784 = (0.70710678118654757*(s419 - s421));
        s422 = (a1783 - a1784);
        s423 = (a1783 + a1784);
        s424 = T28[(a1782 + 24)];
        s425 = T28[(a1782 + 25)];
        s426 = T28[(a1782 + 72)];
        s427 = T28[(a1782 + 73)];
        t646 = (s424 + s426);
        t647 = (s425 + s427);
        t648 = (s424 - s426);
        t649 = (s425 - s427);
        s428 = T28[(a1782 + 36)];
        s429 = T28[(a1782 + 37)];
        s430 = T28[(a1782 + 84)];
        s431 = T28[(a1782 + 85)];
        t650 = (s428 + s430);
        t651 = (s429 + s431);
        a1785 = (0.70710678118654757*(s428 - s430));
        a1786 = (0.70710678118654757*(s429 - s431));
        s432 = (a1785 + a1786);
        s433 = (a1785 - a1786);
        t652 = (t640 + t646);
        t653 = (t641 + t647);
        t654 = (t640 - t646);
        t655 = (t641 - t647);
        t656 = (t644 + t650);
        t657 = (t645 + t651);
        t658 = (t644 - t650);
        t659 = (t645 - t651);
        a1787 = ((2*blockIdx.x) + (2400*a1781) + (1200*a1778) + (50*a1780));
        P2[a1787] = (t652 + t656);
        P2[(a1787 + 1)] = (t653 + t657);
        P2[(a1787 + 57600)] = (t652 - t656);
        P2[(a1787 + 57601)] = (t653 - t657);
        P2[(a1787 + 28800)] = (t654 - t659);
        P2[(a1787 + 28801)] = (t655 + t658);
        P2[(a1787 + 86400)] = (t654 + t659);
        P2[(a1787 + 86401)] = (t655 - t658);
        t660 = (t642 - t649);
        t661 = (t643 + t648);
        t662 = (t642 + t649);
        t663 = (t643 - t648);
        t664 = (s422 - s432);
        t665 = (s423 + s433);
        t666 = (s422 + s432);
        t667 = (s423 - s433);
        P2[(a1787 + 14400)] = (t660 + t664);
        P2[(a1787 + 14401)] = (t661 + t665);
        P2[(a1787 + 72000)] = (t660 - t664);
        P2[(a1787 + 72001)] = (t661 - t665);
        P2[(a1787 + 43200)] = (t662 - t667);
        P2[(a1787 + 43201)] = (t663 + t666);
        P2[(a1787 + 100800)] = (t662 + t667);
        P2[(a1787 + 100801)] = (t663 - t666);
    }
    __syncthreads();
}

__global__ void ker_fftx_imdprdft_48x48x482(double  *Y) {
    __shared__ double T53[3072];
    if ((((threadIdx.x % 8) == 0))) {
        double a1885, a1886, s514, s515, s516, s517, s518, s519, 
                s520, s521, s522, s523, s524, s525, s526, s527, 
                s528, s529, s530, s531;
        int a1883, a1884, a1887;
        a1883 = (threadIdx.x / 8);
        a1884 = ((2400*blockIdx.x) + (50*a1883));
        s514 = P2[a1884];
        s515 = P2[(a1884 + 48)];
        s516 = (s514 + s515);
        s517 = (s514 - s515);
        s518 = (2.0*P2[(a1884 + 24)]);
        s519 = (2.0*P2[(a1884 + 25)]);
        s520 = (s516 + s518);
        s521 = (s516 - s518);
        s522 = (s517 - s519);
        s523 = (s517 + s519);
        s524 = P2[(a1884 + 12)];
        s525 = P2[(a1884 + 13)];
        s526 = P2[(a1884 + 36)];
        s527 = P2[(a1884 + 37)];
        a1885 = (0.70710678118654757*(s524 - s526));
        a1886 = (0.70710678118654757*(s525 + s527));
        s528 = (2.0*(s524 + s526));
        s529 = (2.0*(s525 - s527));
        s530 = (2.0*(a1885 - a1886));
        s531 = (2.0*(a1885 + a1886));
        a1887 = (64*a1883);
        T53[a1887] = (s520 + s528);
        T53[(a1887 + 32)] = (s520 - s528);
        T53[(a1887 + 8)] = (s522 + s530);
        T53[(a1887 + 40)] = (s522 - s530);
        T53[(a1887 + 16)] = (s521 - s529);
        T53[(a1887 + 48)] = (s521 + s529);
        T53[(a1887 + 24)] = (s523 - s531);
        T53[(a1887 + 56)] = (s523 + s531);
    }
    if ((((threadIdx.x % 8) == 1))) {
        for(int i7 = 0; i7 <= 1; i7++) {
            double a2305, a2306, a2307, a2308, a2310, a2311, a2312, a2313, 
                    a2314, a2315, a2316, a2317, a2318, a2319, a2320, a2321, 
                    a2322, a2323, a2324, a2325, s624, s625, s626, s627, 
                    s628, s629, s630, s631, s632, s633, s634, s635, 
                    s636, s637, s638, s639, s640, s641, s642, s643, 
                    t816, t817, t818, t819, t820, t821, t822, t823, 
                    t824, t825, t826, t827, t828, t829, t830, t831, 
                    t832, t833, t834, t835, t836, t837, t838, t839, 
                    t840, t841, t842, t843, t844, t845, t846, t847, 
                    t848, t849, t850, t851, t852, t853, t854, t855, 
                    t856, t857, t858, t859;
            int a2303, a2304, a2309, b350, b351, b352, b353;
            a2303 = (2*i7);
            a2304 = (threadIdx.x / 8);
            b350 = ((2400*blockIdx.x) + (50*a2304));
            b351 = (b350 + a2303);
            s624 = P2[(b351 + 2)];
            s625 = P2[(b351 + 3)];
            b352 = (b350 - a2303);
            s626 = P2[(b352 + 46)];
            s627 = P2[(b352 + 47)];
            t816 = (s624 + s626);
            t817 = (s625 - s627);
            t818 = (s624 - s626);
            t819 = (s625 + s627);
            s628 = P2[(b351 + 14)];
            s629 = P2[(b351 + 15)];
            s630 = P2[(b352 + 34)];
            s631 = P2[(b352 + 35)];
            t820 = (s628 + s630);
            t821 = (s629 - s631);
            a2305 = (0.70710678118654757*(s628 - s630));
            a2306 = (0.70710678118654757*(s629 + s631));
            s632 = (a2305 - a2306);
            s633 = (a2305 + a2306);
            s634 = P2[(b351 + 26)];
            s635 = P2[(b351 + 27)];
            s636 = P2[(b352 + 22)];
            s637 = P2[(b352 + 23)];
            t822 = (s634 + s636);
            t823 = (s635 - s637);
            t824 = (s634 - s636);
            t825 = (s635 + s637);
            s638 = P2[(b351 + 38)];
            s639 = P2[(b351 + 39)];
            s640 = P2[(b352 + 10)];
            s641 = P2[(b352 + 11)];
            t826 = (s638 + s640);
            t827 = (s639 - s641);
            a2307 = (0.70710678118654757*(s638 - s640));
            a2308 = (0.70710678118654757*(s639 + s641));
            s642 = (a2307 + a2308);
            s643 = (a2307 - a2308);
            t828 = (t816 + t822);
            t829 = (t817 + t823);
            t830 = (t816 - t822);
            t831 = (t817 - t823);
            t832 = (t820 + t826);
            t833 = (t821 + t827);
            t834 = (t820 - t826);
            t835 = (t821 - t827);
            t836 = (t828 + t832);
            t837 = (t829 + t833);
            t838 = (t828 - t832);
            t839 = (t829 - t833);
            a2309 = (16*i7);
            a2310 = D1[a2309];
            a2311 = D1[(a2309 + 1)];
            a2312 = D1[(a2309 + 2)];
            a2313 = D1[(a2309 + 3)];
            b353 = ((64*a2304) + a2303);
            T53[(b353 + 2)] = ((a2310*t836) - (a2311*t837));
            T53[(b353 + 3)] = ((a2311*t836) + (a2310*t837));
            T53[(b353 + 34)] = ((a2312*t838) - (a2313*t839));
            T53[(b353 + 35)] = ((a2313*t838) + (a2312*t839));
            t840 = (t830 - t835);
            t841 = (t831 + t834);
            t842 = (t830 + t835);
            t843 = (t831 - t834);
            a2314 = D1[(a2309 + 4)];
            a2315 = D1[(a2309 + 5)];
            a2316 = D1[(a2309 + 6)];
            a2317 = D1[(a2309 + 7)];
            T53[(b353 + 18)] = ((a2314*t840) - (a2315*t841));
            T53[(b353 + 19)] = ((a2315*t840) + (a2314*t841));
            T53[(b353 + 50)] = ((a2316*t842) - (a2317*t843));
            T53[(b353 + 51)] = ((a2317*t842) + (a2316*t843));
            t844 = (t818 - t825);
            t845 = (t819 + t824);
            t846 = (t818 + t825);
            t847 = (t819 - t824);
            t848 = (s632 - s642);
            t849 = (s633 + s643);
            t850 = (s632 + s642);
            t851 = (s633 - s643);
            t852 = (t844 + t848);
            t853 = (t845 + t849);
            t854 = (t844 - t848);
            t855 = (t845 - t849);
            a2318 = D1[(a2309 + 8)];
            a2319 = D1[(a2309 + 9)];
            a2320 = D1[(a2309 + 10)];
            a2321 = D1[(a2309 + 11)];
            T53[(b353 + 10)] = ((a2318*t852) - (a2319*t853));
            T53[(b353 + 11)] = ((a2319*t852) + (a2318*t853));
            T53[(b353 + 42)] = ((a2320*t854) - (a2321*t855));
            T53[(b353 + 43)] = ((a2321*t854) + (a2320*t855));
            t856 = (t846 - t851);
            t857 = (t847 + t850);
            t858 = (t846 + t851);
            t859 = (t847 - t850);
            a2322 = D1[(a2309 + 12)];
            a2323 = D1[(a2309 + 13)];
            a2324 = D1[(a2309 + 14)];
            a2325 = D1[(a2309 + 15)];
            T53[(b353 + 26)] = ((a2322*t856) - (a2323*t857));
            T53[(b353 + 27)] = ((a2323*t856) + (a2322*t857));
            T53[(b353 + 58)] = ((a2324*t858) - (a2325*t859));
            T53[(b353 + 59)] = ((a2325*t858) + (a2324*t859));
        }
    }
    if ((((threadIdx.x % 8) == 2))) {
        double a2429, a2430, s696, s697, s698, s699, s700, s701, 
                s702, s703, t904, t905, t906, t907, t908, t909, 
                t910, t911, t912, t913, t914, t915;
        int a2428, a2431, b364;
        a2428 = (threadIdx.x / 8);
        b364 = ((2400*blockIdx.x) + (50*a2428));
        s696 = P2[(b364 + 6)];
        s697 = P2[(b364 + 7)];
        s698 = P2[(b364 + 42)];
        s699 = P2[(b364 + 43)];
        t904 = (s696 + s698);
        t905 = (s697 - s699);
        t906 = (s696 - s698);
        t907 = (s697 + s699);
        s700 = P2[(b364 + 30)];
        s701 = P2[(b364 + 31)];
        s702 = P2[(b364 + 18)];
        s703 = P2[(b364 + 19)];
        t908 = (s700 + s702);
        t909 = (s701 - s703);
        t910 = (s700 - s702);
        t911 = (s701 + s703);
        a2429 = (0.70710678118654757*(t904 - t908));
        a2430 = (0.70710678118654757*(t905 - t909));
        t912 = (t906 - t911);
        t913 = (t907 + t910);
        t914 = (t906 + t911);
        t915 = (t907 - t910);
        a2431 = (64*a2428);
        T53[(a2431 + 6)] = (2.0*(t904 + t908));
        T53[(a2431 + 38)] = -((2.0*(t905 + t909)));
        T53[(a2431 + 14)] = ((1.8477590650225735*t912) - (0.76536686473017956*t913));
        T53[(a2431 + 46)] = -(((0.76536686473017956*t912) + (1.8477590650225735*t913)));
        T53[(a2431 + 22)] = (2.0*(a2429 - a2430));
        T53[(a2431 + 54)] = -((2.0*(a2429 + a2430)));
        T53[(a2431 + 30)] = ((0.76536686473017956*t914) - (1.8477590650225735*t915));
        T53[(a2431 + 62)] = -(((1.8477590650225735*t914) + (0.76536686473017956*t915)));
    }
    __syncthreads();
    double s751, s752, s753, s754, s755, s756, s757, s758, 
            s759, s760, s761, s762, s763, t935, t936, t937;
    int a2538, a2539, a2540, a2541;
    a2538 = (threadIdx.x / 8);
    a2539 = (threadIdx.x % 8);
    a2540 = ((64*a2538) + (8*a2539));
    s751 = T53[a2540];
    s752 = T53[(a2540 + 6)];
    s753 = (s751 + s752);
    s754 = (s751 - s752);
    s755 = T53[(a2540 + 2)];
    s756 = T53[(a2540 + 3)];
    s757 = T53[(a2540 + 4)];
    s758 = T53[(a2540 + 5)];
    t935 = (s755 + s757);
    t936 = (s755 - s757);
    t937 = (s756 + s758);
    s759 = ((0.5*t936) - (0.8660254037844386*t937));
    s760 = (s753 - t935);
    s761 = (1.7320508075688772*(s756 - s758));
    a2541 = ((2304*blockIdx.x) + (48*a2538) + a2539);
    Y[a2541] = (s753 + (2.0*t935));
    Y[(a2541 + 16)] = (s760 - s761);
    Y[(a2541 + 32)] = (s760 + s761);
    s762 = (s754 - s759);
    s763 = ((1.4999999999999998*t936) + (0.8660254037844386*t937));
    Y[(a2541 + 8)] = (s754 + (2.0*s759));
    Y[(a2541 + 24)] = (s762 - s763);
    Y[(a2541 + 40)] = (s762 + s763);
    __syncthreads();
}

extern "C" {
void fftx_imdprdft_48x48x48(double  *Y, double  *X, double  *sym) {
    dim3 b384(384, 1, 1), b385(384, 1, 1), b387(384, 1, 1), g1(25, 1, 1), g2(25, 1, 1), g3(48, 1, 1);
    hipLaunchKernelGGL(ker_fftx_imdprdft_48x48x480, dim3(g1), dim3(b384), 0, 0, X);
    hipLaunchKernelGGL(ker_fftx_imdprdft_48x48x481, dim3(g2), dim3(b385), 0, 0);
    hipLaunchKernelGGL(ker_fftx_imdprdft_48x48x482, dim3(g3), dim3(b387), 0, 0, Y);
}
}

extern "C" {
void destroy_fftx_imdprdft_48x48x48() {
    double  *hp1;
    hipMemcpyFromSymbol(&(hp1), HIP_SYMBOL(P1), sizeof(double  *));
    hipFree(hp1);
    hipMemcpyFromSymbol(&(hp1), HIP_SYMBOL(P2), sizeof(double  *));
    hipFree(hp1);
}
}

extern "C" {
void init_fftx_imdprdft_48x48x48() {
    double  *hp1;
    hipFuncSetCacheConfig(reinterpret_cast<const void*>(ker_fftx_imdprdft_48x48x480), hipFuncCachePreferL1);
    hipFuncSetCacheConfig(reinterpret_cast<const void*>(ker_fftx_imdprdft_48x48x481), hipFuncCachePreferL1);
    hipFuncSetCacheConfig(reinterpret_cast<const void*>(ker_fftx_imdprdft_48x48x482), hipFuncCachePreferL1);
    hipMalloc(((void  * *) &(hp1)), (sizeof(double )*115200));
    hipMemcpyToSymbol(HIP_SYMBOL(P1), &(hp1), sizeof(double  *));
    hipMalloc(((void  * *) &(hp1)), (sizeof(double )*115200));
    hipMemcpyToSymbol(HIP_SYMBOL(P2), &(hp1), sizeof(double  *));
}
}
