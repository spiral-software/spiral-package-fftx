
/*
 * This code was generated by Spiral 8.4.0-release, www.spiral.net
 */

#include <stdint.h>
__device__ double  *P1, *P2;
 __device__ double D3[128] = {1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 0.92387953251128674, 0.38268343236508978, 
      0.98078528040323043, 0.19509032201612825, 0.83146961230254524, 0.55557023301960218, 
      0.99518472667219693, 0.098017140329560604, 0.88192126434835505, 0.47139673682599764, 
      0.95694033573220882, 0.29028467725446233, 0.77301045336273699, 0.63439328416364549, 
      1.0, 0.0, 0.70710678118654757, 0.70710678118654757, 
      0.92387953251128674, 0.38268343236508978, 0.38268343236508978, 0.92387953251128674, 
      0.98078528040323043, 0.19509032201612825, 0.55557023301960218, 0.83146961230254524, 
      0.83146961230254524, 0.55557023301960218, 0.19509032201612825, 0.98078528040323043, 
      1.0, 0.0, 0.38268343236508978, 0.92387953251128674, 
      0.83146961230254524, 0.55557023301960218, (-0.19509032201612825), 0.98078528040323043, 
      0.95694033573220882, 0.29028467725446233, 0.098017140329560604, 0.99518472667219693, 
      0.63439328416364549, 0.77301045336273699, (-0.47139673682599764), 0.88192126434835505, 
      1.0, 0.0, 0.0, 1.0, 
      0.70710678118654757, 0.70710678118654757, (-0.70710678118654757), 0.70710678118654757, 
      0.92387953251128674, 0.38268343236508978, (-0.38268343236508978), 0.92387953251128674, 
      0.38268343236508978, 0.92387953251128674, (-0.92387953251128674), 0.38268343236508978, 
      1.0, 0.0, (-0.38268343236508978), 0.92387953251128674, 
      0.55557023301960218, 0.83146961230254524, (-0.98078528040323043), 0.19509032201612825, 
      0.88192126434835505, 0.47139673682599764, (-0.77301045336273699), 0.63439328416364549, 
      0.098017140329560604, 0.99518472667219693, (-0.95694033573220882), (-0.29028467725446233), 
      1.0, 0.0, (-0.70710678118654757), 0.70710678118654757, 
      0.38268343236508978, 0.92387953251128674, (-0.92387953251128674), (-0.38268343236508978), 
      0.83146961230254524, 0.55557023301960218, (-0.98078528040323043), 0.19509032201612825, 
      (-0.19509032201612825), 0.98078528040323043, (-0.55557023301960218), (-0.83146961230254524), 
      1.0, 0.0, (-0.92387953251128674), 0.38268343236508978, 
      0.19509032201612825, 0.98078528040323043, (-0.55557023301960218), (-0.83146961230254524), 
      0.77301045336273699, 0.63439328416364549, (-0.95694033573220882), (-0.29028467725446233), 
      (-0.47139673682599764), 0.88192126434835505, 0.098017140329560604, (-0.99518472667219693)};

 __device__ double D4[128] = {1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 0.92387953251128674, (-0.38268343236508978), 
      0.98078528040323043, (-0.19509032201612825), 0.83146961230254524, (-0.55557023301960218), 
      0.99518472667219693, (-0.098017140329560604), 0.88192126434835505, (-0.47139673682599764), 
      0.95694033573220882, (-0.29028467725446233), 0.77301045336273699, (-0.63439328416364549), 
      1.0, 0.0, 0.70710678118654757, (-0.70710678118654757), 
      0.92387953251128674, (-0.38268343236508978), 0.38268343236508978, (-0.92387953251128674), 
      0.98078528040323043, (-0.19509032201612825), 0.55557023301960218, (-0.83146961230254524), 
      0.83146961230254524, (-0.55557023301960218), 0.19509032201612825, (-0.98078528040323043), 
      1.0, 0.0, 0.38268343236508978, (-0.92387953251128674), 
      0.83146961230254524, (-0.55557023301960218), (-0.19509032201612825), (-0.98078528040323043), 
      0.95694033573220882, (-0.29028467725446233), 0.098017140329560604, (-0.99518472667219693), 
      0.63439328416364549, (-0.77301045336273699), (-0.47139673682599764), (-0.88192126434835505), 
      1.0, 0.0, 0.0, (-1.0), 
      0.70710678118654757, (-0.70710678118654757), (-0.70710678118654757), (-0.70710678118654757), 
      0.92387953251128674, (-0.38268343236508978), (-0.38268343236508978), (-0.92387953251128674), 
      0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), (-0.38268343236508978), 
      1.0, 0.0, (-0.38268343236508978), (-0.92387953251128674), 
      0.55557023301960218, (-0.83146961230254524), (-0.98078528040323043), (-0.19509032201612825), 
      0.88192126434835505, (-0.47139673682599764), (-0.77301045336273699), (-0.63439328416364549), 
      0.098017140329560604, (-0.99518472667219693), (-0.95694033573220882), 0.29028467725446233, 
      1.0, 0.0, (-0.70710678118654757), (-0.70710678118654757), 
      0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), 0.38268343236508978, 
      0.83146961230254524, (-0.55557023301960218), (-0.98078528040323043), (-0.19509032201612825), 
      (-0.19509032201612825), (-0.98078528040323043), (-0.55557023301960218), 0.83146961230254524, 
      1.0, 0.0, (-0.92387953251128674), (-0.38268343236508978), 
      0.19509032201612825, (-0.98078528040323043), (-0.55557023301960218), 0.83146961230254524, 
      0.77301045336273699, (-0.63439328416364549), (-0.95694033573220882), 0.29028467725446233, 
      (-0.47139673682599764), (-0.88192126434835505), 0.098017140329560604, 0.99518472667219693};

 __constant__ double D1[48] = {1.0, 0.0, 0.92387953251128674, 0.38268343236508978, 
      0.98078528040323043, 0.19509032201612825, 0.83146961230254524, 0.55557023301960218, 
      0.99518472667219693, 0.098017140329560604, 0.88192126434835505, 0.47139673682599764, 
      0.95694033573220882, 0.29028467725446233, 0.77301045336273699, 0.63439328416364549, 
      1.0, 0.0, 0.70710678118654757, 0.70710678118654757, 
      0.92387953251128674, 0.38268343236508978, 0.38268343236508978, 0.92387953251128674, 
      0.98078528040323043, 0.19509032201612825, 0.55557023301960218, 0.83146961230254524, 
      0.83146961230254524, 0.55557023301960218, 0.19509032201612825, 0.98078528040323043, 
      1.0, 0.0, 0.38268343236508978, 0.92387953251128674, 
      0.83146961230254524, 0.55557023301960218, (-0.19509032201612825), 0.98078528040323043, 
      0.95694033573220882, 0.29028467725446233, 0.098017140329560604, 0.99518472667219693, 
      0.63439328416364549, 0.77301045336273699, (-0.47139673682599764), 0.88192126434835505};

 __constant__ double D6[48] = {1.0, 0.0, 0.92387953251128674, (-0.38268343236508978), 
      0.99518472667219693, (-0.098017140329560604), 0.88192126434835505, (-0.47139673682599764), 
      0.98078528040323043, (-0.19509032201612825), 0.83146961230254524, (-0.55557023301960218), 
      0.95694033573220882, (-0.29028467725446233), 0.77301045336273699, (-0.63439328416364549), 
      1.0, 0.0, 0.70710678118654757, (-0.70710678118654757), 
      0.98078528040323043, (-0.19509032201612825), 0.55557023301960218, (-0.83146961230254524), 
      0.92387953251128674, (-0.38268343236508978), 0.38268343236508978, (-0.92387953251128674), 
      0.83146961230254524, (-0.55557023301960218), 0.19509032201612825, (-0.98078528040323043), 
      1.0, 0.0, 0.38268343236508978, (-0.92387953251128674), 
      0.95694033573220882, (-0.29028467725446233), 0.098017140329560604, (-0.99518472667219693), 
      0.83146961230254524, (-0.55557023301960218), (-0.19509032201612825), (-0.98078528040323043), 
      0.63439328416364549, (-0.77301045336273699), (-0.47139673682599764), (-0.88192126434835505)};


__global__ void ker_Mdrconv_32_cu0(double  *X) {
    __shared__ double T5[1296];
    for(int i113 = 0; i113 <= 7; i113++) {
        double a65, a66, s33, s34, s35, s36, s37, s38, 
                s39, s40;
        int a63, a64;
        a63 = ((512*blockIdx.x) + (256*threadIdx.y) + (32*threadIdx.x) + i113);
        s33 = X[a63];
        s34 = X[(a63 + 8)];
        s35 = X[(a63 + 16)];
        s36 = X[(a63 + 24)];
        s37 = (s33 + s35);
        s38 = (s34 + s36);
        a64 = (10*i113);
        T5[((a64 + (81*threadIdx.x)) + (648*threadIdx.y))] = (s37 + s38);
        T5[(((a64 + 1) + (81*threadIdx.x)) + (648*threadIdx.y))] = 0.0;
        T5[(((a64 + 8) + (81*threadIdx.x)) + (648*threadIdx.y))] = (s37 - s38);
        T5[(((a64 + 9) + (81*threadIdx.x)) + (648*threadIdx.y))] = 0.0;
        T5[(((a64 + 4) + (81*threadIdx.x)) + (648*threadIdx.y))] = (s33 - s35);
        T5[(((a64 + 5) + (81*threadIdx.x)) + (648*threadIdx.y))] = (s36 - s34);
        a65 = (0.70710678118654757*s36);
        a66 = (0.70710678118654757*s34);
        s39 = (a65 - a66);
        s40 = (a65 + a66);
        T5[(((a64 + 2) + (81*threadIdx.x)) + (648*threadIdx.y))] = (s39 - s33);
        T5[(((a64 + 3) + (81*threadIdx.x)) + (648*threadIdx.y))] = (s35 + s40);
        T5[(((a64 + 6) + (81*threadIdx.x)) + (648*threadIdx.y))] = -((s33 + s39));
        T5[(((a64 + 7) + (81*threadIdx.x)) + (648*threadIdx.y))] = (s40 - s35);
    }
    double a146, a147, s83, s84, s85, s86, s87, s88, 
            s89, s90, s91, s92;
    int a145;
    s83 = (T5[((81*threadIdx.x) + (648*threadIdx.y))] + T5[((40 + (81*threadIdx.x)) + (648*threadIdx.y))]);
    s84 = (T5[((81*threadIdx.x) + (648*threadIdx.y))] - T5[((40 + (81*threadIdx.x)) + (648*threadIdx.y))]);
    s85 = (T5[((10 + (81*threadIdx.x)) + (648*threadIdx.y))] + T5[((50 + (81*threadIdx.x)) + (648*threadIdx.y))]);
    s86 = (T5[((20 + (81*threadIdx.x)) + (648*threadIdx.y))] + T5[((60 + (81*threadIdx.x)) + (648*threadIdx.y))]);
    s87 = (T5[((20 + (81*threadIdx.x)) + (648*threadIdx.y))] - T5[((60 + (81*threadIdx.x)) + (648*threadIdx.y))]);
    s88 = (T5[((30 + (81*threadIdx.x)) + (648*threadIdx.y))] + T5[((70 + (81*threadIdx.x)) + (648*threadIdx.y))]);
    s89 = (s83 + s86);
    s90 = (s85 + s88);
    a145 = ((32*blockIdx.x) + (16*threadIdx.y) + (2*threadIdx.x));
    P1[a145] = (s89 + s90);
    P1[(a145 + 1)] = 0.0;
    P1[(a145 + 65536)] = (s89 - s90);
    P1[(a145 + 65537)] = 0.0;
    P1[(a145 + 32768)] = (s83 - s86);
    P1[(a145 + 32769)] = (s88 - s85);
    a146 = (0.70710678118654757*(T5[((10 + (81*threadIdx.x)) + (648*threadIdx.y))] - T5[((50 + (81*threadIdx.x)) + (648*threadIdx.y))]));
    a147 = (0.70710678118654757*(T5[((30 + (81*threadIdx.x)) + (648*threadIdx.y))] - T5[((70 + (81*threadIdx.x)) + (648*threadIdx.y))]));
    s91 = (a146 - a147);
    s92 = (a146 + a147);
    P1[(a145 + 16384)] = (s84 + s91);
    P1[(a145 + 16385)] = -((s87 + s92));
    P1[(a145 + 49152)] = (s84 - s91);
    P1[(a145 + 49153)] = (s87 - s92);
    for(int i111 = 0; i111 <= 2; i111++) {
        double a534, a535, a536, a537, a538, a539, a540, a541, 
                a542, a543, a544, a545, a546, a547, a548, a549, 
                a550, a551, a552, a553, s201, s202, s203, s204, 
                s205, s206, s207, s208, s209, s210, s211, s212, 
                s213, s214, s215, s216, s217, s218, s219, s220, 
                s221, s222, s223, s224, s225, s226, s227, s228, 
                s229, s230, s231, s232, s233, s234, s235, s236, 
                t446, t447, t448, t449, t450, t451, t452, t453, 
                t454, t455, t456, t457, t458, t459, t460, t461, 
                t462, t463, t464, t465, t466, t467, t468, t469, 
                t470, t471, t472, t473;
        int a532, a533, a554, b89, b90, b91;
        a532 = (2*i111);
        s201 = T5[(((a532 + 2) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s202 = T5[(((a532 + 3) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s203 = T5[(((a532 + 42) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s204 = T5[(((a532 + 43) + (81*threadIdx.x)) + (648*threadIdx.y))];
        a533 = (16*i111);
        a534 = D6[a533];
        a535 = D6[(a533 + 1)];
        s205 = ((a534*s201) - (a535*s202));
        s206 = ((a535*s201) + (a534*s202));
        a536 = D6[(a533 + 2)];
        a537 = D6[(a533 + 3)];
        s207 = ((a536*s203) - (a537*s204));
        s208 = ((a537*s203) + (a536*s204));
        t446 = (s205 + s207);
        t447 = (s206 + s208);
        t448 = (s205 - s207);
        t449 = (s206 - s208);
        s209 = T5[(((a532 + 12) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s210 = T5[(((a532 + 13) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s211 = T5[(((a532 + 52) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s212 = T5[(((a532 + 53) + (81*threadIdx.x)) + (648*threadIdx.y))];
        a538 = D6[(a533 + 4)];
        a539 = D6[(a533 + 5)];
        s213 = ((a538*s209) - (a539*s210));
        s214 = ((a539*s209) + (a538*s210));
        a540 = D6[(a533 + 6)];
        a541 = D6[(a533 + 7)];
        s215 = ((a540*s211) - (a541*s212));
        s216 = ((a541*s211) + (a540*s212));
        t450 = (s213 + s215);
        t451 = (s214 + s216);
        a542 = (0.70710678118654757*(s213 - s215));
        a543 = (0.70710678118654757*(s214 - s216));
        s217 = (a542 + a543);
        s218 = (a543 - a542);
        s219 = T5[(((a532 + 22) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s220 = T5[(((a532 + 23) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s221 = T5[(((a532 + 62) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s222 = T5[(((a532 + 63) + (81*threadIdx.x)) + (648*threadIdx.y))];
        a544 = D6[(a533 + 8)];
        a545 = D6[(a533 + 9)];
        s223 = ((a544*s219) - (a545*s220));
        s224 = ((a545*s219) + (a544*s220));
        a546 = D6[(a533 + 10)];
        a547 = D6[(a533 + 11)];
        s225 = ((a546*s221) - (a547*s222));
        s226 = ((a547*s221) + (a546*s222));
        t452 = (s223 + s225);
        t453 = (s224 + s226);
        t454 = (s223 - s225);
        t455 = (s224 - s226);
        s227 = T5[(((a532 + 32) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s228 = T5[(((a532 + 33) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s229 = T5[(((a532 + 72) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s230 = T5[(((a532 + 73) + (81*threadIdx.x)) + (648*threadIdx.y))];
        a548 = D6[(a533 + 12)];
        a549 = D6[(a533 + 13)];
        s231 = ((a548*s227) - (a549*s228));
        s232 = ((a549*s227) + (a548*s228));
        a550 = D6[(a533 + 14)];
        a551 = D6[(a533 + 15)];
        s233 = ((a550*s229) - (a551*s230));
        s234 = ((a551*s229) + (a550*s230));
        t456 = (s231 + s233);
        t457 = (s232 + s234);
        a552 = (0.70710678118654757*(s232 - s234));
        a553 = (0.70710678118654757*(s231 - s233));
        s235 = (a552 - a553);
        s236 = (a553 + a552);
        t458 = (t446 + t452);
        t459 = (t447 + t453);
        t460 = (t446 - t452);
        t461 = (t447 - t453);
        t462 = (t450 + t456);
        t463 = (t451 + t457);
        t464 = (t450 - t456);
        t465 = (t451 - t457);
        a554 = (2048*i111);
        b89 = ((32*blockIdx.x) + (16*threadIdx.y) + (2*threadIdx.x));
        b90 = (b89 + a554);
        P1[(b90 + 2048)] = (t458 + t462);
        P1[(b90 + 2049)] = (t459 + t463);
        b91 = (b89 - a554);
        P1[(b91 + 63488)] = (t458 - t462);
        P1[(b91 + 63489)] = (t463 - t459);
        P1[(b90 + 34816)] = (t460 + t465);
        P1[(b90 + 34817)] = (t461 - t464);
        P1[(b91 + 30720)] = (t460 - t465);
        P1[(b91 + 30721)] = -((t461 + t464));
        t466 = (t448 + t455);
        t467 = (t449 - t454);
        t468 = (t448 - t455);
        t469 = (t449 + t454);
        t470 = (s217 + s235);
        t471 = (s218 - s236);
        t472 = (s217 - s235);
        t473 = (s218 + s236);
        P1[(b90 + 18432)] = (t466 + t470);
        P1[(b90 + 18433)] = (t467 + t471);
        P1[(b91 + 47104)] = (t466 - t470);
        P1[(b91 + 47105)] = (t471 - t467);
        P1[(b90 + 51200)] = (t468 + t473);
        P1[(b90 + 51201)] = (t469 - t472);
        P1[(b91 + 14336)] = (t468 - t473);
        P1[(b91 + 14337)] = -((t469 + t472));
    }
    double a638, a639, s255, s256, s257, s258, s259, s260, 
            t514, t515, t516, t517, t518, t519, t520, t521;
    int b111;
    a638 = (0.70710678118654757*T5[((28 + (81*threadIdx.x)) + (648*threadIdx.y))]);
    a639 = (0.70710678118654757*T5[((68 + (81*threadIdx.x)) + (648*threadIdx.y))]);
    s255 = (a638 - a639);
    s256 = (a638 + a639);
    t514 = (T5[((8 + (81*threadIdx.x)) + (648*threadIdx.y))] + s255);
    t515 = (T5[((48 + (81*threadIdx.x)) + (648*threadIdx.y))] + s256);
    t516 = (T5[((8 + (81*threadIdx.x)) + (648*threadIdx.y))] - s255);
    t517 = (s256 - T5[((48 + (81*threadIdx.x)) + (648*threadIdx.y))]);
    s257 = ((0.92387953251128674*T5[((18 + (81*threadIdx.x)) + (648*threadIdx.y))]) - (0.38268343236508978*T5[((58 + (81*threadIdx.x)) + (648*threadIdx.y))]));
    s258 = ((0.38268343236508978*T5[((18 + (81*threadIdx.x)) + (648*threadIdx.y))]) + (0.92387953251128674*T5[((58 + (81*threadIdx.x)) + (648*threadIdx.y))]));
    s259 = ((0.38268343236508978*T5[((38 + (81*threadIdx.x)) + (648*threadIdx.y))]) - (0.92387953251128674*T5[((78 + (81*threadIdx.x)) + (648*threadIdx.y))]));
    s260 = ((0.92387953251128674*T5[((38 + (81*threadIdx.x)) + (648*threadIdx.y))]) + (0.38268343236508978*T5[((78 + (81*threadIdx.x)) + (648*threadIdx.y))]));
    t518 = (s257 + s259);
    t519 = (s258 + s260);
    t520 = (s257 - s259);
    t521 = (s260 - s258);
    b111 = ((32*blockIdx.x) + (16*threadIdx.y) + (2*threadIdx.x));
    P1[(b111 + 8192)] = (t514 + t518);
    P1[(b111 + 8193)] = -((t515 + t519));
    P1[(b111 + 57344)] = (t514 - t518);
    P1[(b111 + 57345)] = (t515 - t519);
    P1[(b111 + 40960)] = (t516 + t521);
    P1[(b111 + 40961)] = (t517 - t520);
    P1[(b111 + 24576)] = (t516 - t521);
    P1[(b111 + 24577)] = -((t517 + t520));
}

__global__ void ker_Mdrconv_32_cu1() {
    __shared__ double T64[3072];
    double a1196, a1197, a1198, a1199, a1201, a1202, a1203, a1204, 
            a1206, a1207, a1208, a1209, a1210, a1211, a1212, a1213, 
            a1214, a1215, a1216, a1217, s329, s330, s331, s332, 
            s333, s334, s335, s336, s337, s338, s339, s340, 
            t618, t619, t620, t621, t622, t623, t624, t625, 
            t626, t627, t628, t629, t630, t631, t632, t633, 
            t634, t635, t636, t637, t638, t639, t640, t641, 
            t642, t643, t644, t645, t646, t647, t648, t649;
    int a1191, a1192, a1193, a1194, a1195, a1200, a1205;
    a1191 = (threadIdx.x / 96);
    a1192 = (threadIdx.x % 96);
    a1193 = (a1192 / 8);
    a1194 = (a1192 % 8);
    a1195 = ((1536*blockIdx.x) + (768*a1191) + (64*a1193) + (2*a1194));
    s329 = P1[a1195];
    s330 = P1[(a1195 + 1)];
    s331 = P1[(a1195 + 16)];
    s332 = P1[(a1195 + 17)];
    a1196 = (0.70710678118654757*s331);
    a1197 = (0.70710678118654757*s332);
    s333 = (a1196 + a1197);
    s334 = (a1196 - a1197);
    s335 = P1[(a1195 + 32)];
    s336 = P1[(a1195 + 33)];
    s337 = P1[(a1195 + 48)];
    s338 = P1[(a1195 + 49)];
    a1198 = (0.70710678118654757*s337);
    a1199 = (0.70710678118654757*s338);
    s339 = (a1198 - a1199);
    s340 = (a1198 + a1199);
    t618 = (s329 + s335);
    t619 = (s330 + s336);
    t620 = (s329 - s335);
    t621 = (s330 - s336);
    t622 = (s331 + s337);
    t623 = (s332 + s338);
    t624 = (s331 - s337);
    t625 = (s332 - s338);
    t626 = (t618 + t622);
    t627 = (t619 + t623);
    t628 = (t618 - t622);
    t629 = (t619 - t623);
    a1200 = (16*a1194);
    a1201 = D4[a1200];
    a1202 = D4[(a1200 + 1)];
    a1203 = D4[(a1200 + 2)];
    a1204 = D4[(a1200 + 3)];
    a1205 = ((1536*a1191) + (128*a1193) + a1200);
    T64[a1205] = ((a1201*t626) - (a1202*t627));
    T64[(a1205 + 1)] = ((a1202*t626) + (a1201*t627));
    T64[(a1205 + 8)] = ((a1203*t628) - (a1204*t629));
    T64[(a1205 + 9)] = ((a1204*t628) + (a1203*t629));
    t630 = (t620 + t625);
    t631 = (t621 - t624);
    t632 = (t620 - t625);
    t633 = (t621 + t624);
    a1206 = D4[(4 + a1200)];
    a1207 = D4[(5 + a1200)];
    a1208 = D4[(6 + a1200)];
    a1209 = D4[(7 + a1200)];
    T64[(a1205 + 4)] = ((a1206*t630) - (a1207*t631));
    T64[(a1205 + 5)] = ((a1207*t630) + (a1206*t631));
    T64[(a1205 + 12)] = ((a1208*t632) - (a1209*t633));
    T64[(a1205 + 13)] = ((a1209*t632) + (a1208*t633));
    t634 = (s329 + s336);
    t635 = (s335 - s330);
    t636 = (s336 - s329);
    t637 = (s330 + s335);
    t638 = (s339 - s333);
    t639 = (s334 + s340);
    t640 = (s333 + s339);
    t641 = (s334 - s340);
    t642 = (t638 - t634);
    t643 = (t635 + t639);
    t644 = (t634 + t638);
    t645 = (t635 - t639);
    a1210 = D4[(a1200 + 8)];
    a1211 = D4[(9 + a1200)];
    a1212 = D4[(10 + a1200)];
    a1213 = D4[(11 + a1200)];
    T64[(a1205 + 2)] = ((a1210*t642) - (a1211*t643));
    T64[(a1205 + 3)] = ((a1211*t642) + (a1210*t643));
    T64[(a1205 + 10)] = -(((a1212*t644) + (a1213*t645)));
    T64[(a1205 + 11)] = ((a1212*t645) - (a1213*t644));
    t646 = (t636 + t641);
    t647 = (t640 - t637);
    t648 = (t636 - t641);
    t649 = (t637 + t640);
    a1214 = D4[(12 + a1200)];
    a1215 = D4[(13 + a1200)];
    a1216 = D4[(14 + a1200)];
    a1217 = D4[(15 + a1200)];
    T64[(a1205 + 6)] = ((a1214*t646) - (a1215*t647));
    T64[(a1205 + 7)] = ((a1215*t646) + (a1214*t647));
    T64[(a1205 + 14)] = ((a1216*t648) + (a1217*t649));
    T64[(a1205 + 15)] = ((a1217*t648) - (a1216*t649));
    __syncthreads();
    double a2087, a2088, a2089, a2090, s402, s403, s404, s405, 
            s406, s407, s408, s409, s410, s411, s412, s413, 
            s414, s415, s416, s417, s418, s419, s420, s421, 
            t774, t775, t776, t777, t778, t779, t780, t781, 
            t782, t783, t784, t785, t786, t787, t788, t789, 
            t790, t791, t792, t793, t794, t795, t796, t797, 
            t798, t799, t800, t801;
    int a2082, a2083, a2084, a2085, a2086, a2091, a2092, a2093, 
            a2094, a2095, a2096, a2097, a2098, a2099, a2100, a2101, 
            a2102, a2103, a2104, a2105, a2106, a2107, a2108, a2109, 
            a2110, a2111, a2112, a2113, a2114, a2115;
    a2082 = (threadIdx.x / 96);
    a2083 = (threadIdx.x % 96);
    a2084 = (a2083 / 8);
    a2085 = (a2083 % 8);
    a2086 = ((1536*a2082) + (128*a2084) + (2*a2085));
    s402 = T64[a2086];
    s403 = T64[(a2086 + 1)];
    s404 = T64[(a2086 + 64)];
    s405 = T64[(a2086 + 65)];
    t774 = (s402 + s404);
    t775 = (s403 + s405);
    t776 = (s402 - s404);
    t777 = (s403 - s405);
    s406 = T64[(a2086 + 16)];
    s407 = T64[(a2086 + 17)];
    s408 = T64[(a2086 + 80)];
    s409 = T64[(a2086 + 81)];
    t778 = (s406 + s408);
    t779 = (s407 + s409);
    a2087 = (0.70710678118654757*(s406 - s408));
    a2088 = (0.70710678118654757*(s407 - s409));
    s410 = (a2087 + a2088);
    s411 = (a2088 - a2087);
    s412 = T64[(a2086 + 32)];
    s413 = T64[(a2086 + 33)];
    s414 = T64[(a2086 + 96)];
    s415 = T64[(a2086 + 97)];
    t780 = (s412 + s414);
    t781 = (s413 + s415);
    t782 = (s412 - s414);
    t783 = (s413 - s415);
    s416 = T64[(a2086 + 48)];
    s417 = T64[(a2086 + 49)];
    s418 = T64[(a2086 + 112)];
    s419 = T64[(a2086 + 113)];
    t784 = (s416 + s418);
    t785 = (s417 + s419);
    a2089 = (0.70710678118654757*(s417 - s419));
    a2090 = (0.70710678118654757*(s416 - s418));
    s420 = (a2089 - a2090);
    s421 = (a2090 + a2089);
    t786 = (t774 + t780);
    t787 = (t775 + t781);
    t788 = (t774 - t780);
    t789 = (t775 - t781);
    t790 = (t778 + t784);
    t791 = (t779 + t785);
    t792 = (t778 - t784);
    t793 = (t779 - t785);
    a2091 = (48*blockIdx.x);
    a2092 = ((768*a2082) + (64*a2084) + a2085);
    a2093 = (a2092 / 64);
    a2094 = (a2091 + (2112*((a2093 + (24*(a2092 % 64))) / 24)) + (2*(a2093 % 24)));
    P2[a2094] = (t786 + t790);
    P2[(a2094 + 1)] = (t787 + t791);
    a2095 = (a2092 + 32);
    a2096 = (a2095 / 64);
    a2097 = (a2091 + (2112*((a2096 + (24*(a2095 % 64))) / 24)) + (2*(a2096 % 24)));
    P2[a2097] = (t786 - t790);
    P2[(a2097 + 1)] = (t787 - t791);
    a2098 = (a2092 + 16);
    a2099 = (a2098 / 64);
    a2100 = (a2091 + (2112*((a2099 + (24*(a2098 % 64))) / 24)) + (2*(a2099 % 24)));
    P2[a2100] = (t788 + t793);
    P2[(a2100 + 1)] = (t789 - t792);
    a2101 = (a2092 + 48);
    a2102 = (a2101 / 64);
    a2103 = (a2091 + (2112*((a2102 + (24*(a2101 % 64))) / 24)) + (2*(a2102 % 24)));
    P2[a2103] = (t788 - t793);
    P2[(a2103 + 1)] = (t789 + t792);
    t794 = (t776 + t783);
    t795 = (t777 - t782);
    t796 = (t776 - t783);
    t797 = (t777 + t782);
    t798 = (s410 + s420);
    t799 = (s411 - s421);
    t800 = (s410 - s420);
    t801 = (s411 + s421);
    a2104 = (a2092 + 8);
    a2105 = (a2104 / 64);
    a2106 = (a2091 + (2112*((a2105 + (24*(a2104 % 64))) / 24)) + (2*(a2105 % 24)));
    P2[a2106] = (t794 + t798);
    P2[(a2106 + 1)] = (t795 + t799);
    a2107 = (a2092 + 40);
    a2108 = (a2107 / 64);
    a2109 = (a2091 + (2112*((a2108 + (24*(a2107 % 64))) / 24)) + (2*(a2108 % 24)));
    P2[a2109] = (t794 - t798);
    P2[(a2109 + 1)] = (t795 - t799);
    a2110 = (a2092 + 24);
    a2111 = (a2110 / 64);
    a2112 = (a2091 + (2112*((a2111 + (24*(a2110 % 64))) / 24)) + (2*(a2111 % 24)));
    P2[a2112] = (t796 + t801);
    P2[(a2112 + 1)] = (t797 - t800);
    a2113 = (a2092 + 56);
    a2114 = (a2113 / 64);
    a2115 = (a2091 + (2112*((a2114 + (24*(a2113 % 64))) / 24)) + (2*(a2114 % 24)));
    P2[a2115] = (t796 - t801);
    P2[(a2115 + 1)] = (t797 + t800);
    __syncthreads();
}

__global__ void ker_Mdrconv_32_cu2(double  *sym) {
    __shared__ double T87[3072];
    __shared__ double T88[3072];
    __shared__ double T89[3072];
    double a2672, a2673, a2674, a2675, a2677, a2678, a2679, a2680, 
            a2682, a2683, a2684, a2685, a2686, a2687, a2688, a2689, 
            a2690, a2691, a2692, a2693, s490, s491, s492, s493, 
            s494, s495, s496, s497, s498, s499, s500, s501, 
            t898, t899, t900, t901, t902, t903, t904, t905, 
            t906, t907, t908, t909, t910, t911, t912, t913, 
            t914, t915, t916, t917, t918, t919, t920, t921, 
            t922, t923, t924, t925, t926, t927, t928, t929;
    int a2667, a2668, a2669, a2670, a2671, a2676, a2681;
    a2667 = (threadIdx.x / 32);
    a2668 = (threadIdx.x % 32);
    a2669 = (a2668 / 8);
    a2670 = (a2668 % 8);
    a2671 = ((1536*blockIdx.x) + (256*a2667) + (64*a2669) + (2*a2670));
    s490 = P2[a2671];
    s491 = P2[(a2671 + 1)];
    s492 = P2[(a2671 + 16)];
    s493 = P2[(a2671 + 17)];
    a2672 = (0.70710678118654757*s492);
    a2673 = (0.70710678118654757*s493);
    s494 = (a2672 + a2673);
    s495 = (a2673 - a2672);
    s496 = P2[(a2671 + 32)];
    s497 = P2[(a2671 + 33)];
    s498 = P2[(a2671 + 48)];
    s499 = P2[(a2671 + 49)];
    a2674 = (0.70710678118654757*s499);
    a2675 = (0.70710678118654757*s498);
    s500 = (a2674 - a2675);
    s501 = (a2675 + a2674);
    t898 = (s490 + s496);
    t899 = (s491 + s497);
    t900 = (s490 - s496);
    t901 = (s491 - s497);
    t902 = (s492 + s498);
    t903 = (s493 + s499);
    t904 = (s492 - s498);
    t905 = (s493 - s499);
    t906 = (t898 + t902);
    t907 = (t899 + t903);
    t908 = (t898 - t902);
    t909 = (t899 - t903);
    a2676 = (16*a2670);
    a2677 = D4[a2676];
    a2678 = D4[(a2676 + 1)];
    a2679 = D4[(a2676 + 2)];
    a2680 = D4[(a2676 + 3)];
    a2681 = ((512*a2667) + (128*a2669) + a2676);
    T89[a2681] = ((a2677*t906) - (a2678*t907));
    T89[(a2681 + 1)] = ((a2678*t906) + (a2677*t907));
    T89[(a2681 + 8)] = ((a2679*t908) - (a2680*t909));
    T89[(a2681 + 9)] = ((a2680*t908) + (a2679*t909));
    t910 = (t900 + t905);
    t911 = (t901 - t904);
    t912 = (t900 - t905);
    t913 = (t901 + t904);
    a2682 = D4[(4 + a2676)];
    a2683 = D4[(5 + a2676)];
    a2684 = D4[(6 + a2676)];
    a2685 = D4[(7 + a2676)];
    T89[(a2681 + 4)] = ((a2682*t910) - (a2683*t911));
    T89[(a2681 + 5)] = ((a2683*t910) + (a2682*t911));
    T89[(a2681 + 12)] = ((a2684*t912) - (a2685*t913));
    T89[(a2681 + 13)] = ((a2685*t912) + (a2684*t913));
    t914 = (s490 + s497);
    t915 = (s491 - s496);
    t916 = (s490 - s497);
    t917 = (s491 + s496);
    t918 = (s494 + s500);
    t919 = (s495 - s501);
    t920 = (s494 - s500);
    t921 = (s495 + s501);
    t922 = (t914 + t918);
    t923 = (t915 + t919);
    t924 = (t914 - t918);
    t925 = (t915 - t919);
    a2686 = D4[(a2676 + 8)];
    a2687 = D4[(9 + a2676)];
    a2688 = D4[(10 + a2676)];
    a2689 = D4[(11 + a2676)];
    T89[(a2681 + 2)] = ((a2686*t922) - (a2687*t923));
    T89[(a2681 + 3)] = ((a2687*t922) + (a2686*t923));
    T89[(a2681 + 10)] = ((a2688*t924) - (a2689*t925));
    T89[(a2681 + 11)] = ((a2689*t924) + (a2688*t925));
    t926 = (t916 + t921);
    t927 = (t917 - t920);
    t928 = (t916 - t921);
    t929 = (t917 + t920);
    a2690 = D4[(12 + a2676)];
    a2691 = D4[(13 + a2676)];
    a2692 = D4[(14 + a2676)];
    a2693 = D4[(15 + a2676)];
    T89[(a2681 + 6)] = ((a2690*t926) - (a2691*t927));
    T89[(a2681 + 7)] = ((a2691*t926) + (a2690*t927));
    T89[(a2681 + 14)] = ((a2692*t928) - (a2693*t929));
    T89[(a2681 + 15)] = ((a2693*t928) + (a2692*t929));
    __syncthreads();
    double a3223, a3224, a3233, a3234, a3236, a3237, a3238, a3239, 
            a3240, a3241, a3242, a3243, s594, s595, s596, s597, 
            s598, s599, s600, s601, s602, s603, s604, s605, 
            s606, s607, s608, s609, s610, s611, s612, s613, 
            t1054, t1055, t1056, t1057, t1058, t1059, t1060, t1061, 
            t1062, t1063, t1064, t1065, t1066, t1067, t1068, t1069, 
            t1070, t1071, t1072, t1073, t1074, t1075, t1076, t1077, 
            t1078, t1079, t1080, t1081;
    int a3213, a3214, a3215, a3216, a3217, a3218, a3219, a3220, 
            a3221, a3222, a3225, a3226, a3227, a3228, a3229, a3230, 
            a3231, a3232, a3235;
    a3213 = (threadIdx.x % 32);
    a3214 = (a3213 % 8);
    a3215 = ((512*(threadIdx.x / 32)) + (128*(a3213 / 8)) + (2*a3214));
    s594 = T89[a3215];
    a3216 = (a3215 + 1);
    s595 = T89[a3216];
    a3217 = (a3215 + 64);
    s596 = T89[a3217];
    a3218 = (a3215 + 65);
    s597 = T89[a3218];
    t1054 = (s594 + s596);
    t1055 = (s595 + s597);
    t1056 = (s594 - s596);
    t1057 = (s595 - s597);
    a3219 = (a3215 + 16);
    s598 = T89[a3219];
    a3220 = (a3215 + 17);
    s599 = T89[a3220];
    a3221 = (a3215 + 80);
    s600 = T89[a3221];
    a3222 = (a3215 + 81);
    s601 = T89[a3222];
    t1058 = (s598 + s600);
    t1059 = (s599 + s601);
    a3223 = (0.70710678118654757*(s598 - s600));
    a3224 = (0.70710678118654757*(s599 - s601));
    s602 = (a3223 + a3224);
    s603 = (a3224 - a3223);
    a3225 = (a3215 + 32);
    s604 = T89[a3225];
    a3226 = (a3215 + 33);
    s605 = T89[a3226];
    a3227 = (a3215 + 96);
    s606 = T89[a3227];
    a3228 = (a3215 + 97);
    s607 = T89[a3228];
    t1060 = (s604 + s606);
    t1061 = (s605 + s607);
    t1062 = (s604 - s606);
    t1063 = (s605 - s607);
    a3229 = (a3215 + 48);
    s608 = T89[a3229];
    a3230 = (a3215 + 49);
    s609 = T89[a3230];
    a3231 = (a3215 + 112);
    s610 = T89[a3231];
    a3232 = (a3215 + 113);
    s611 = T89[a3232];
    t1064 = (s608 + s610);
    t1065 = (s609 + s611);
    a3233 = (0.70710678118654757*(s609 - s611));
    a3234 = (0.70710678118654757*(s608 - s610));
    s612 = (a3233 - a3234);
    s613 = (a3234 + a3233);
    t1066 = (t1054 + t1060);
    t1067 = (t1055 + t1061);
    t1068 = (t1054 - t1060);
    t1069 = (t1055 - t1061);
    t1070 = (t1058 + t1064);
    t1071 = (t1059 + t1065);
    t1072 = (t1058 - t1064);
    t1073 = (t1059 - t1065);
    a3235 = ((24*i40) + (4*i47) + (8*i48) + i51 + (2*i52) + (2112*a3214));
    a3236 = sym[a3235];
    a3237 = sym[(a3235 + 67584)];
    T88[a3215] = (a3236*(t1066 + t1070));
    T88[a3216] = (a3236*(t1067 + t1071));
    T88[a3217] = (a3237*(t1066 - t1070));
    T88[a3218] = (a3237*(t1067 - t1071));
    a3238 = sym[(a3235 + 33792)];
    a3239 = sym[(a3235 + 101376)];
    T88[a3225] = (a3238*(t1068 + t1073));
    T88[a3226] = (a3238*(t1069 - t1072));
    T88[a3227] = (a3239*(t1068 - t1073));
    T88[a3228] = (a3239*(t1069 + t1072));
    t1074 = (t1056 + t1063);
    t1075 = (t1057 - t1062);
    t1076 = (t1056 - t1063);
    t1077 = (t1057 + t1062);
    t1078 = (s602 + s612);
    t1079 = (s603 - s613);
    t1080 = (s602 - s612);
    t1081 = (s603 + s613);
    a3240 = sym[(a3235 + 16896)];
    a3241 = sym[(a3235 + 84480)];
    T88[a3219] = (a3240*(t1074 + t1078));
    T88[a3220] = (a3240*(t1075 + t1079));
    T88[a3221] = (a3241*(t1074 - t1078));
    T88[a3222] = (a3241*(t1075 - t1079));
    a3242 = sym[(a3235 + 50688)];
    a3243 = sym[(a3235 + 118272)];
    T88[a3229] = (a3242*(t1076 + t1081));
    T88[a3230] = (a3242*(t1077 - t1080));
    T88[a3231] = (a3243*(t1076 - t1081));
    T88[a3232] = (a3243*(t1077 + t1080));
    __syncthreads();
    double a3870, a3871, a3880, a3881, a3883, a3884, a3885, a3886, 
            a3887, a3888, a3889, a3890, a3891, a3892, a3893, a3894, 
            a3895, a3896, a3897, a3898, s706, s707, s708, s709, 
            s710, s711, s712, s713, s714, s715, s716, s717, 
            s718, s719, s720, s721, s722, s723, s724, s725, 
            t1222, t1223, t1224, t1225, t1226, t1227, t1228, t1229, 
            t1230, t1231, t1232, t1233, t1234, t1235, t1236, t1237, 
            t1238, t1239, t1240, t1241, t1242, t1243, t1244, t1245, 
            t1246, t1247, t1248, t1249, t1250, t1251, t1252, t1253, 
            t1254, t1255, t1256, t1257, t1258, t1259, t1260, t1261, 
            t1262, t1263, t1264, t1265;
    int a3860, a3861, a3862, a3863, a3864, a3865, a3866, a3867, 
            a3868, a3869, a3872, a3873, a3874, a3875, a3876, a3877, 
            a3878, a3879, a3882;
    a3860 = (threadIdx.x % 32);
    a3861 = (a3860 % 8);
    a3862 = ((512*(threadIdx.x / 32)) + (128*(a3860 / 8)) + (2*a3861));
    s706 = T88[a3862];
    a3863 = (a3862 + 1);
    s707 = T88[a3863];
    a3864 = (a3862 + 64);
    s708 = T88[a3864];
    a3865 = (a3862 + 65);
    s709 = T88[a3865];
    t1222 = (s706 + s708);
    t1223 = (s707 + s709);
    t1224 = (s706 - s708);
    t1225 = (s707 - s709);
    a3866 = (a3862 + 16);
    s710 = T88[a3866];
    a3867 = (a3862 + 17);
    s711 = T88[a3867];
    a3868 = (a3862 + 80);
    s712 = T88[a3868];
    a3869 = (a3862 + 81);
    s713 = T88[a3869];
    t1226 = (s710 + s712);
    t1227 = (s711 + s713);
    a3870 = (0.70710678118654757*(s710 - s712));
    a3871 = (0.70710678118654757*(s711 - s713));
    s714 = (a3870 - a3871);
    s715 = (a3870 + a3871);
    a3872 = (a3862 + 32);
    s716 = T88[a3872];
    a3873 = (a3862 + 33);
    s717 = T88[a3873];
    a3874 = (a3862 + 96);
    s718 = T88[a3874];
    a3875 = (a3862 + 97);
    s719 = T88[a3875];
    t1228 = (s716 + s718);
    t1229 = (s717 + s719);
    t1230 = (s716 - s718);
    t1231 = (s717 - s719);
    a3876 = (a3862 + 48);
    s720 = T88[a3876];
    a3877 = (a3862 + 49);
    s721 = T88[a3877];
    a3878 = (a3862 + 112);
    s722 = T88[a3878];
    a3879 = (a3862 + 113);
    s723 = T88[a3879];
    t1232 = (s720 + s722);
    t1233 = (s721 + s723);
    a3880 = (0.70710678118654757*(s720 - s722));
    a3881 = (0.70710678118654757*(s721 - s723));
    s724 = (a3880 + a3881);
    s725 = (a3880 - a3881);
    t1234 = (t1222 + t1228);
    t1235 = (t1223 + t1229);
    t1236 = (t1222 - t1228);
    t1237 = (t1223 - t1229);
    t1238 = (t1226 + t1232);
    t1239 = (t1227 + t1233);
    t1240 = (t1226 - t1232);
    t1241 = (t1227 - t1233);
    t1242 = (t1234 + t1238);
    t1243 = (t1235 + t1239);
    t1244 = (t1234 - t1238);
    t1245 = (t1235 - t1239);
    a3882 = (16*a3861);
    a3883 = D3[a3882];
    a3884 = D3[(a3882 + 1)];
    a3885 = D3[(a3882 + 2)];
    a3886 = D3[(a3882 + 3)];
    T87[a3862] = ((a3883*t1242) - (a3884*t1243));
    T87[a3863] = ((a3884*t1242) + (a3883*t1243));
    T87[a3864] = ((a3885*t1244) - (a3886*t1245));
    T87[a3865] = ((a3886*t1244) + (a3885*t1245));
    t1246 = (t1236 - t1241);
    t1247 = (t1237 + t1240);
    t1248 = (t1236 + t1241);
    t1249 = (t1237 - t1240);
    a3887 = D3[(4 + a3882)];
    a3888 = D3[(5 + a3882)];
    a3889 = D3[(6 + a3882)];
    a3890 = D3[(7 + a3882)];
    T87[a3872] = ((a3887*t1246) - (a3888*t1247));
    T87[a3873] = ((a3888*t1246) + (a3887*t1247));
    T87[a3874] = ((a3889*t1248) - (a3890*t1249));
    T87[a3875] = ((a3890*t1248) + (a3889*t1249));
    t1250 = (t1224 - t1231);
    t1251 = (t1225 + t1230);
    t1252 = (t1224 + t1231);
    t1253 = (t1225 - t1230);
    t1254 = (s714 - s724);
    t1255 = (s715 + s725);
    t1256 = (s714 + s724);
    t1257 = (s715 - s725);
    t1258 = (t1250 + t1254);
    t1259 = (t1251 + t1255);
    t1260 = (t1250 - t1254);
    t1261 = (t1251 - t1255);
    a3891 = D3[(a3882 + 8)];
    a3892 = D3[(9 + a3882)];
    a3893 = D3[(10 + a3882)];
    a3894 = D3[(11 + a3882)];
    T87[a3866] = ((a3891*t1258) - (a3892*t1259));
    T87[a3867] = ((a3892*t1258) + (a3891*t1259));
    T87[a3868] = ((a3893*t1260) - (a3894*t1261));
    T87[a3869] = ((a3894*t1260) + (a3893*t1261));
    t1262 = (t1252 - t1257);
    t1263 = (t1253 + t1256);
    t1264 = (t1252 + t1257);
    t1265 = (t1253 - t1256);
    a3895 = D3[(12 + a3882)];
    a3896 = D3[(13 + a3882)];
    a3897 = D3[(14 + a3882)];
    a3898 = D3[(15 + a3882)];
    T87[a3876] = ((a3895*t1262) - (a3896*t1263));
    T87[a3877] = ((a3896*t1262) + (a3895*t1263));
    T87[a3878] = ((a3897*t1264) - (a3898*t1265));
    T87[a3879] = ((a3898*t1264) + (a3897*t1265));
    __syncthreads();
    double a4185, a4186, a4187, a4188, s786, s787, s788, s789, 
            s790, s791, s792, s793, s794, s795, s796, s797, 
            s798, s799, s800, s801, s802, s803, s804, s805, 
            t1366, t1367, t1368, t1369, t1370, t1371, t1372, t1373, 
            t1374, t1375, t1376, t1377;
    int a4180, a4181, a4182, a4183, a4184, a4189;
    a4180 = (threadIdx.x / 32);
    a4181 = (threadIdx.x % 32);
    a4182 = (a4181 / 8);
    a4183 = (a4181 % 8);
    a4184 = ((512*a4180) + (128*a4182) + (16*a4183));
    s786 = T87[a4184];
    s787 = T87[(a4184 + 1)];
    s788 = T87[(a4184 + 8)];
    s789 = T87[(a4184 + 9)];
    t1366 = (s786 + s788);
    t1367 = (s787 + s789);
    t1368 = (s786 - s788);
    t1369 = (s787 - s789);
    s790 = T87[(a4184 + 2)];
    s791 = T87[(a4184 + 3)];
    s792 = T87[(a4184 + 10)];
    s793 = T87[(a4184 + 11)];
    t1370 = (s790 + s792);
    t1371 = (s791 + s793);
    a4185 = (0.70710678118654757*(s790 - s792));
    a4186 = (0.70710678118654757*(s791 - s793));
    s794 = (a4185 - a4186);
    s795 = (a4185 + a4186);
    s796 = T87[(a4184 + 4)];
    s797 = T87[(a4184 + 5)];
    s798 = T87[(a4184 + 12)];
    s799 = T87[(a4184 + 13)];
    t1372 = (s796 + s798);
    t1373 = (s797 + s799);
    t1374 = (s796 - s798);
    t1375 = (s797 - s799);
    s800 = T87[(a4184 + 6)];
    s801 = T87[(a4184 + 7)];
    s802 = T87[(a4184 + 14)];
    s803 = T87[(a4184 + 15)];
    t1376 = (s800 + s802);
    t1377 = (s801 + s803);
    a4187 = (0.70710678118654757*(s800 - s802));
    a4188 = (0.70710678118654757*(s801 - s803));
    s804 = (a4187 + a4188);
    s805 = (a4187 - a4188);
    a4189 = ((1536*blockIdx.x) + (256*a4180) + (64*a4182) + (2*a4183));
    P1[a4189] = ((t1366 + t1372) - (t1370 + t1376));
    P1[(a4189 + 1)] = ((t1367 + t1373) - (t1371 + t1377));
    P1[(a4189 + 32)] = ((t1366 - t1372) + (t1371 - t1377));
    P1[(a4189 + 33)] = (((t1367 - t1373) + t1376) - t1370);
    P1[(a4189 + 16)] = (((t1368 - t1375) + s804) - s794);
    P1[(a4189 + 17)] = ((t1369 + t1374) - (s795 + s805));
    P1[(a4189 + 48)] = (t1368 + t1375 + (s795 - s805));
    P1[(a4189 + 49)] = ((t1369 - t1374) - (s794 + s804));
    __syncthreads();
}

__global__ void ker_Mdrconv_32_cu3() {
    __shared__ double T135[3072];
    double a5342, a5343, a5356, a5357, a5359, a5360, a5361, a5362, 
            a5364, a5365, a5366, a5367, a5368, a5369, a5370, a5371, 
            a5372, a5373, a5374, a5375, s898, s899, s900, s901, 
            s902, s903, s904, s905, s906, s907, s908, s909, 
            s910, s911, s912, s913, s914, s915, s916, s917, 
            t1518, t1519, t1520, t1521, t1522, t1523, t1524, t1525, 
            t1526, t1527, t1528, t1529, t1530, t1531, t1532, t1533, 
            t1534, t1535, t1536, t1537, t1538, t1539, t1540, t1541, 
            t1542, t1543, t1544, t1545, t1546, t1547, t1548, t1549, 
            t1550, t1551, t1552, t1553, t1554, t1555, t1556, t1557, 
            t1558, t1559, t1560, t1561;
    int a5325, a5326, a5327, a5328, a5329, a5330, a5331, a5332, 
            a5333, a5334, a5335, a5336, a5337, a5338, a5339, a5340, 
            a5341, a5344, a5345, a5346, a5347, a5348, a5349, a5350, 
            a5351, a5352, a5353, a5354, a5355, a5358, a5363;
    a5325 = (48*blockIdx.x);
    a5326 = (threadIdx.x / 96);
    a5327 = (threadIdx.x % 96);
    a5328 = (a5327 / 8);
    a5329 = (a5327 % 8);
    a5330 = ((768*a5326) + (64*a5328) + a5329);
    a5331 = (a5330 / 64);
    a5332 = (a5325 + (2112*((a5331 + (24*(a5330 % 64))) / 24)) + (2*(a5331 % 24)));
    s898 = P1[a5332];
    s899 = P1[(a5332 + 1)];
    a5333 = (a5330 + 32);
    a5334 = (a5333 / 64);
    a5335 = (a5325 + (2112*((a5334 + (24*(a5333 % 64))) / 24)) + (2*(a5334 % 24)));
    s900 = P1[a5335];
    s901 = P1[(a5335 + 1)];
    t1518 = (s898 + s900);
    t1519 = (s899 + s901);
    t1520 = (s898 - s900);
    t1521 = (s899 - s901);
    a5336 = (a5330 + 8);
    a5337 = (a5336 / 64);
    a5338 = (a5325 + (2112*((a5337 + (24*(a5336 % 64))) / 24)) + (2*(a5337 % 24)));
    s902 = P1[a5338];
    s903 = P1[(a5338 + 1)];
    a5339 = (a5330 + 40);
    a5340 = (a5339 / 64);
    a5341 = (a5325 + (2112*((a5340 + (24*(a5339 % 64))) / 24)) + (2*(a5340 % 24)));
    s904 = P1[a5341];
    s905 = P1[(a5341 + 1)];
    t1522 = (s902 + s904);
    t1523 = (s903 + s905);
    a5342 = (0.70710678118654757*(s902 - s904));
    a5343 = (0.70710678118654757*(s903 - s905));
    s906 = (a5342 - a5343);
    s907 = (a5342 + a5343);
    a5344 = (a5330 + 16);
    a5345 = (a5344 / 64);
    a5346 = (a5325 + (2112*((a5345 + (24*(a5344 % 64))) / 24)) + (2*(a5345 % 24)));
    s908 = P1[a5346];
    s909 = P1[(a5346 + 1)];
    a5347 = (a5330 + 48);
    a5348 = (a5347 / 64);
    a5349 = (a5325 + (2112*((a5348 + (24*(a5347 % 64))) / 24)) + (2*(a5348 % 24)));
    s910 = P1[a5349];
    s911 = P1[(a5349 + 1)];
    t1524 = (s908 + s910);
    t1525 = (s909 + s911);
    t1526 = (s908 - s910);
    t1527 = (s909 - s911);
    a5350 = (a5330 + 24);
    a5351 = (a5350 / 64);
    a5352 = (a5325 + (2112*((a5351 + (24*(a5350 % 64))) / 24)) + (2*(a5351 % 24)));
    s912 = P1[a5352];
    s913 = P1[(a5352 + 1)];
    a5353 = (a5330 + 56);
    a5354 = (a5353 / 64);
    a5355 = (a5325 + (2112*((a5354 + (24*(a5353 % 64))) / 24)) + (2*(a5354 % 24)));
    s914 = P1[a5355];
    s915 = P1[(a5355 + 1)];
    t1528 = (s912 + s914);
    t1529 = (s913 + s915);
    a5356 = (0.70710678118654757*(s912 - s914));
    a5357 = (0.70710678118654757*(s913 - s915));
    s916 = (a5356 + a5357);
    s917 = (a5356 - a5357);
    t1530 = (t1518 + t1524);
    t1531 = (t1519 + t1525);
    t1532 = (t1518 - t1524);
    t1533 = (t1519 - t1525);
    t1534 = (t1522 + t1528);
    t1535 = (t1523 + t1529);
    t1536 = (t1522 - t1528);
    t1537 = (t1523 - t1529);
    t1538 = (t1530 + t1534);
    t1539 = (t1531 + t1535);
    t1540 = (t1530 - t1534);
    t1541 = (t1531 - t1535);
    a5358 = (16*a5329);
    a5359 = D3[a5358];
    a5360 = D3[(a5358 + 1)];
    a5361 = D3[(a5358 + 2)];
    a5362 = D3[(a5358 + 3)];
    a5363 = ((1536*a5326) + (128*a5328) + (2*a5329));
    T135[a5363] = ((a5359*t1538) - (a5360*t1539));
    T135[(a5363 + 1)] = ((a5360*t1538) + (a5359*t1539));
    T135[(a5363 + 64)] = ((a5361*t1540) - (a5362*t1541));
    T135[(a5363 + 65)] = ((a5362*t1540) + (a5361*t1541));
    t1542 = (t1532 - t1537);
    t1543 = (t1533 + t1536);
    t1544 = (t1532 + t1537);
    t1545 = (t1533 - t1536);
    a5364 = D3[(4 + a5358)];
    a5365 = D3[(5 + a5358)];
    a5366 = D3[(6 + a5358)];
    a5367 = D3[(7 + a5358)];
    T135[(a5363 + 32)] = ((a5364*t1542) - (a5365*t1543));
    T135[(a5363 + 33)] = ((a5365*t1542) + (a5364*t1543));
    T135[(a5363 + 96)] = ((a5366*t1544) - (a5367*t1545));
    T135[(a5363 + 97)] = ((a5367*t1544) + (a5366*t1545));
    t1546 = (t1520 - t1527);
    t1547 = (t1521 + t1526);
    t1548 = (t1520 + t1527);
    t1549 = (t1521 - t1526);
    t1550 = (s906 - s916);
    t1551 = (s907 + s917);
    t1552 = (s906 + s916);
    t1553 = (s907 - s917);
    t1554 = (t1546 + t1550);
    t1555 = (t1547 + t1551);
    t1556 = (t1546 - t1550);
    t1557 = (t1547 - t1551);
    a5368 = D3[(a5358 + 8)];
    a5369 = D3[(9 + a5358)];
    a5370 = D3[(10 + a5358)];
    a5371 = D3[(11 + a5358)];
    T135[(a5363 + 16)] = ((a5368*t1554) - (a5369*t1555));
    T135[(a5363 + 17)] = ((a5369*t1554) + (a5368*t1555));
    T135[(a5363 + 80)] = ((a5370*t1556) - (a5371*t1557));
    T135[(a5363 + 81)] = ((a5371*t1556) + (a5370*t1557));
    t1558 = (t1548 - t1553);
    t1559 = (t1549 + t1552);
    t1560 = (t1548 + t1553);
    t1561 = (t1549 - t1552);
    a5372 = D3[(12 + a5358)];
    a5373 = D3[(13 + a5358)];
    a5374 = D3[(14 + a5358)];
    a5375 = D3[(15 + a5358)];
    T135[(a5363 + 48)] = ((a5372*t1558) - (a5373*t1559));
    T135[(a5363 + 49)] = ((a5373*t1558) + (a5372*t1559));
    T135[(a5363 + 112)] = ((a5374*t1560) - (a5375*t1561));
    T135[(a5363 + 113)] = ((a5375*t1560) + (a5374*t1561));
    __syncthreads();
    double a5662, a5663, a5664, a5665, s978, s979, s980, s981, 
            s982, s983, s984, s985, s986, s987, s988, s989, 
            s990, s991, s992, s993, s994, s995, s996, s997, 
            t1662, t1663, t1664, t1665, t1666, t1667, t1668, t1669, 
            t1670, t1671, t1672, t1673;
    int a5657, a5658, a5659, a5660, a5661, a5666;
    a5657 = (threadIdx.x / 96);
    a5658 = (threadIdx.x % 96);
    a5659 = (a5658 / 8);
    a5660 = (a5658 % 8);
    a5661 = ((1536*a5657) + (128*a5659) + (16*a5660));
    s978 = T135[a5661];
    s979 = T135[(a5661 + 1)];
    s980 = T135[(a5661 + 8)];
    s981 = T135[(a5661 + 9)];
    t1662 = (s978 + s980);
    t1663 = (s979 + s981);
    t1664 = (s978 - s980);
    t1665 = (s979 - s981);
    s982 = T135[(a5661 + 2)];
    s983 = T135[(a5661 + 3)];
    s984 = T135[(a5661 + 10)];
    s985 = T135[(a5661 + 11)];
    t1666 = (s982 + s984);
    t1667 = (s983 + s985);
    a5662 = (0.70710678118654757*(s982 - s984));
    a5663 = (0.70710678118654757*(s983 - s985));
    s986 = (a5662 - a5663);
    s987 = (a5662 + a5663);
    s988 = T135[(a5661 + 4)];
    s989 = T135[(a5661 + 5)];
    s990 = T135[(a5661 + 12)];
    s991 = T135[(a5661 + 13)];
    t1668 = (s988 + s990);
    t1669 = (s989 + s991);
    t1670 = (s988 - s990);
    t1671 = (s989 - s991);
    s992 = T135[(a5661 + 6)];
    s993 = T135[(a5661 + 7)];
    s994 = T135[(a5661 + 14)];
    s995 = T135[(a5661 + 15)];
    t1672 = (s992 + s994);
    t1673 = (s993 + s995);
    a5664 = (0.70710678118654757*(s992 - s994));
    a5665 = (0.70710678118654757*(s993 - s995));
    s996 = (a5664 + a5665);
    s997 = (a5664 - a5665);
    a5666 = ((1536*blockIdx.x) + (768*a5657) + (64*a5659) + (2*a5660));
    P2[a5666] = (t1662 + t1668 + t1666 + t1672);
    P2[(a5666 + 1)] = (t1663 + t1669 + t1667 + t1673);
    P2[(a5666 + 32)] = (((t1662 - t1668) + t1673) - t1667);
    P2[(a5666 + 33)] = ((t1663 - t1669) + (t1666 - t1672));
    P2[(a5666 + 16)] = ((t1664 - t1671) + (s986 - s996));
    P2[(a5666 + 17)] = (t1665 + t1670 + s987 + s997);
    P2[(a5666 + 48)] = ((t1664 + t1671 + s997) - s987);
    P2[(a5666 + 49)] = ((t1665 - t1670) + s986 + s996);
    __syncthreads();
}

__global__ void ker_Mdrconv_32_cu4(double  *Y) {
    __shared__ double T158[1296];
    double a5730, a5731, s1078, s1079, s1080, s1081, s1082, s1083, 
            s1084, s1085, s1086, s1087, s1088, s1089, s1090, s1091, 
            s1092, s1093, s1094, s1095;
    int a5729;
    a5729 = ((32*blockIdx.x) + (16*threadIdx.y) + (2*threadIdx.x));
    s1078 = P2[a5729];
    s1079 = P2[(a5729 + 65536)];
    s1080 = (s1078 + s1079);
    s1081 = (s1078 - s1079);
    s1082 = (2.0*P2[(a5729 + 32768)]);
    s1083 = (2.0*P2[(a5729 + 32769)]);
    s1084 = (s1080 + s1082);
    s1085 = (s1080 - s1082);
    s1086 = (s1081 - s1083);
    s1087 = (s1081 + s1083);
    s1088 = P2[(a5729 + 16384)];
    s1089 = P2[(a5729 + 16385)];
    s1090 = P2[(a5729 + 49152)];
    s1091 = P2[(a5729 + 49153)];
    a5730 = (0.70710678118654757*(s1088 - s1090));
    a5731 = (0.70710678118654757*(s1089 + s1091));
    s1092 = (2.0*(s1088 + s1090));
    s1093 = (2.0*(s1089 - s1091));
    s1094 = (2.0*(a5730 - a5731));
    s1095 = (2.0*(a5730 + a5731));
    T158[((81*threadIdx.x) + (648*threadIdx.y))] = (s1084 + s1092);
    T158[((40 + (81*threadIdx.x)) + (648*threadIdx.y))] = (s1084 - s1092);
    T158[((10 + (81*threadIdx.x)) + (648*threadIdx.y))] = (s1086 + s1094);
    T158[((50 + (81*threadIdx.x)) + (648*threadIdx.y))] = (s1086 - s1094);
    T158[((20 + (81*threadIdx.x)) + (648*threadIdx.y))] = (s1085 - s1093);
    T158[((60 + (81*threadIdx.x)) + (648*threadIdx.y))] = (s1085 + s1093);
    T158[((30 + (81*threadIdx.x)) + (648*threadIdx.y))] = (s1087 - s1095);
    T158[((70 + (81*threadIdx.x)) + (648*threadIdx.y))] = (s1087 + s1095);
    for(int i94 = 0; i94 <= 2; i94++) {
        double a6116, a6117, a6118, a6119, a6121, a6122, a6123, a6124, 
                a6126, a6127, a6128, a6129, a6130, a6131, a6132, a6133, 
                a6134, a6135, a6136, a6137, s1188, s1189, s1190, s1191, 
                s1192, s1193, s1194, s1195, s1196, s1197, s1198, s1199, 
                s1200, s1201, s1202, s1203, s1204, s1205, s1206, s1207, 
                t1822, t1823, t1824, t1825, t1826, t1827, t1828, t1829, 
                t1830, t1831, t1832, t1833, t1834, t1835, t1836, t1837, 
                t1838, t1839, t1840, t1841, t1842, t1843, t1844, t1845, 
                t1846, t1847, t1848, t1849, t1850, t1851, t1852, t1853, 
                t1854, t1855, t1856, t1857, t1858, t1859, t1860, t1861, 
                t1862, t1863, t1864, t1865;
        int a6115, a6120, a6125, b934, b935, b936;
        a6115 = (2048*i94);
        b934 = ((32*blockIdx.x) + (16*threadIdx.y) + (2*threadIdx.x));
        b935 = (b934 + a6115);
        s1188 = P2[(b935 + 2048)];
        s1189 = P2[(b935 + 2049)];
        b936 = (b934 - a6115);
        s1190 = P2[(b936 + 63488)];
        s1191 = P2[(b936 + 63489)];
        t1822 = (s1188 + s1190);
        t1823 = (s1189 - s1191);
        t1824 = (s1188 - s1190);
        t1825 = (s1189 + s1191);
        s1192 = P2[(b935 + 18432)];
        s1193 = P2[(b935 + 18433)];
        s1194 = P2[(b936 + 47104)];
        s1195 = P2[(b936 + 47105)];
        t1826 = (s1192 + s1194);
        t1827 = (s1193 - s1195);
        a6116 = (0.70710678118654757*(s1192 - s1194));
        a6117 = (0.70710678118654757*(s1193 + s1195));
        s1196 = (a6116 - a6117);
        s1197 = (a6116 + a6117);
        s1198 = P2[(b935 + 34816)];
        s1199 = P2[(b935 + 34817)];
        s1200 = P2[(b936 + 30720)];
        s1201 = P2[(b936 + 30721)];
        t1828 = (s1198 + s1200);
        t1829 = (s1199 - s1201);
        t1830 = (s1198 - s1200);
        t1831 = (s1199 + s1201);
        s1202 = P2[(b935 + 51200)];
        s1203 = P2[(b935 + 51201)];
        s1204 = P2[(b936 + 14336)];
        s1205 = P2[(b936 + 14337)];
        t1832 = (s1202 + s1204);
        t1833 = (s1203 - s1205);
        a6118 = (0.70710678118654757*(s1202 - s1204));
        a6119 = (0.70710678118654757*(s1203 + s1205));
        s1206 = (a6118 + a6119);
        s1207 = (a6118 - a6119);
        t1834 = (t1822 + t1828);
        t1835 = (t1823 + t1829);
        t1836 = (t1822 - t1828);
        t1837 = (t1823 - t1829);
        t1838 = (t1826 + t1832);
        t1839 = (t1827 + t1833);
        t1840 = (t1826 - t1832);
        t1841 = (t1827 - t1833);
        t1842 = (t1834 + t1838);
        t1843 = (t1835 + t1839);
        t1844 = (t1834 - t1838);
        t1845 = (t1835 - t1839);
        a6120 = (16*i94);
        a6121 = D1[a6120];
        a6122 = D1[(a6120 + 1)];
        a6123 = D1[(a6120 + 2)];
        a6124 = D1[(a6120 + 3)];
        a6125 = (2*i94);
        T158[(((a6125 + 2) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6121*t1842) - (a6122*t1843));
        T158[(((a6125 + 3) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6122*t1842) + (a6121*t1843));
        T158[(((a6125 + 42) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6123*t1844) - (a6124*t1845));
        T158[(((a6125 + 43) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6124*t1844) + (a6123*t1845));
        t1846 = (t1836 - t1841);
        t1847 = (t1837 + t1840);
        t1848 = (t1836 + t1841);
        t1849 = (t1837 - t1840);
        a6126 = D1[(a6120 + 4)];
        a6127 = D1[(a6120 + 5)];
        a6128 = D1[(a6120 + 6)];
        a6129 = D1[(a6120 + 7)];
        T158[(((a6125 + 22) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6126*t1846) - (a6127*t1847));
        T158[(((a6125 + 23) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6127*t1846) + (a6126*t1847));
        T158[(((a6125 + 62) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6128*t1848) - (a6129*t1849));
        T158[(((a6125 + 63) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6129*t1848) + (a6128*t1849));
        t1850 = (t1824 - t1831);
        t1851 = (t1825 + t1830);
        t1852 = (t1824 + t1831);
        t1853 = (t1825 - t1830);
        t1854 = (s1196 - s1206);
        t1855 = (s1197 + s1207);
        t1856 = (s1196 + s1206);
        t1857 = (s1197 - s1207);
        t1858 = (t1850 + t1854);
        t1859 = (t1851 + t1855);
        t1860 = (t1850 - t1854);
        t1861 = (t1851 - t1855);
        a6130 = D1[(a6120 + 8)];
        a6131 = D1[(a6120 + 9)];
        a6132 = D1[(a6120 + 10)];
        a6133 = D1[(a6120 + 11)];
        T158[(((a6125 + 12) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6130*t1858) - (a6131*t1859));
        T158[(((a6125 + 13) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6131*t1858) + (a6130*t1859));
        T158[(((a6125 + 52) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6132*t1860) - (a6133*t1861));
        T158[(((a6125 + 53) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6133*t1860) + (a6132*t1861));
        t1862 = (t1852 - t1857);
        t1863 = (t1853 + t1856);
        t1864 = (t1852 + t1857);
        t1865 = (t1853 - t1856);
        a6134 = D1[(a6120 + 12)];
        a6135 = D1[(a6120 + 13)];
        a6136 = D1[(a6120 + 14)];
        a6137 = D1[(a6120 + 15)];
        T158[(((a6125 + 32) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6134*t1862) - (a6135*t1863));
        T158[(((a6125 + 33) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6135*t1862) + (a6134*t1863));
        T158[(((a6125 + 72) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6136*t1864) - (a6137*t1865));
        T158[(((a6125 + 73) + (81*threadIdx.x)) + (648*threadIdx.y))] = ((a6137*t1864) + (a6136*t1865));
    }
    double a6205, a6206, s1260, s1261, s1262, s1263, s1264, s1265, 
            s1266, s1267, t1910, t1911, t1912, t1913, t1914, t1915, 
            t1916, t1917, t1918, t1919, t1920, t1921;
    int b956;
    b956 = ((32*blockIdx.x) + (16*threadIdx.y) + (2*threadIdx.x));
    s1260 = P2[(b956 + 8192)];
    s1261 = P2[(b956 + 8193)];
    s1262 = P2[(b956 + 57344)];
    s1263 = P2[(b956 + 57345)];
    t1910 = (s1260 + s1262);
    t1911 = (s1261 - s1263);
    t1912 = (s1260 - s1262);
    t1913 = (s1261 + s1263);
    s1264 = P2[(b956 + 40960)];
    s1265 = P2[(b956 + 40961)];
    s1266 = P2[(b956 + 24576)];
    s1267 = P2[(b956 + 24577)];
    t1914 = (s1264 + s1266);
    t1915 = (s1265 - s1267);
    t1916 = (s1264 - s1266);
    t1917 = (s1265 + s1267);
    a6205 = (0.70710678118654757*(t1910 - t1914));
    a6206 = (0.70710678118654757*(t1911 - t1915));
    t1918 = (t1912 - t1917);
    t1919 = (t1913 + t1916);
    t1920 = (t1912 + t1917);
    t1921 = (t1913 - t1916);
    T158[((8 + (81*threadIdx.x)) + (648*threadIdx.y))] = (2.0*(t1910 + t1914));
    T158[((48 + (81*threadIdx.x)) + (648*threadIdx.y))] = -((2.0*(t1911 + t1915)));
    T158[((18 + (81*threadIdx.x)) + (648*threadIdx.y))] = ((1.8477590650225735*t1918) - (0.76536686473017956*t1919));
    T158[((58 + (81*threadIdx.x)) + (648*threadIdx.y))] = -(((0.76536686473017956*t1918) + (1.8477590650225735*t1919)));
    T158[((28 + (81*threadIdx.x)) + (648*threadIdx.y))] = (2.0*(a6205 - a6206));
    T158[((68 + (81*threadIdx.x)) + (648*threadIdx.y))] = -((2.0*(a6205 + a6206)));
    T158[((38 + (81*threadIdx.x)) + (648*threadIdx.y))] = ((0.76536686473017956*t1920) - (1.8477590650225735*t1921));
    T158[((78 + (81*threadIdx.x)) + (648*threadIdx.y))] = -(((1.8477590650225735*t1920) + (0.76536686473017956*t1921)));
    for(int i95 = 0; i95 <= 7; i95++) {
        double a6270, a6271, s1336, s1337, s1338, s1339, s1340, s1341, 
                s1342, s1343, s1344, s1345;
        int a6269, a6272;
        a6269 = (10*i95);
        s1336 = T158[((a6269 + (81*threadIdx.x)) + (648*threadIdx.y))];
        s1337 = T158[(((a6269 + 8) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s1338 = (s1336 + s1337);
        s1339 = (s1336 - s1337);
        s1340 = (2.0*T158[(((a6269 + 4) + (81*threadIdx.x)) + (648*threadIdx.y))]);
        s1341 = (2.0*T158[(((a6269 + 5) + (81*threadIdx.x)) + (648*threadIdx.y))]);
        s1342 = T158[(((a6269 + 2) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s1343 = T158[(((a6269 + 3) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s1344 = T158[(((a6269 + 6) + (81*threadIdx.x)) + (648*threadIdx.y))];
        s1345 = T158[(((a6269 + 7) + (81*threadIdx.x)) + (648*threadIdx.y))];
        a6270 = (0.70710678118654757*(s1342 - s1344));
        a6271 = (0.70710678118654757*(s1343 + s1345));
        a6272 = ((512*blockIdx.x) + (256*threadIdx.y) + (32*threadIdx.x) + i95);
        Y[a6272] = (s1338 + s1340 + (2.0*(s1342 + s1344)));
        Y[(a6272 + 8)] = ((s1339 - s1341) + (2.0*(a6270 - a6271)));
        Y[(a6272 + 16)] = ((s1338 - s1340) - (2.0*(s1343 - s1345)));
        Y[(a6272 + 24)] = ((s1339 + s1341) - (2.0*(a6270 + a6271)));
    }
}

extern "C" {
void Mdrconv_32_cu(double  *Y, double  *X, double  *sym) {
    dim3 b970(8, 2, 1), b971(192, 1, 1), b972(192, 1, 1), b973(192, 1, 1), b974(8, 2, 1), g1(64, 1, 1), g2(44, 1, 1), g3(88, 1, 1), 
    g4(44, 1, 1), g5(64, 1, 1);
    ker_Mdrconv_32_cu0<<<g1, b970>>>(X);
    ker_Mdrconv_32_cu1<<<g2, b971>>>();
    ker_Mdrconv_32_cu2<<<g3, b972>>>(sym);
    ker_Mdrconv_32_cu3<<<g4, b973>>>();
    ker_Mdrconv_32_cu4<<<g5, b974>>>(Y);
}
}

extern "C" {
void destroy_Mdrconv_32_cu() {
    double  *hp1;
    cudaMemcpyFromSymbol(&(hp1), P1, sizeof(double  *));
    cudaFree(hp1);
    cudaMemcpyFromSymbol(&(hp1), P2, sizeof(double  *));
    cudaFree(hp1);
}
}

extern "C" {
void init_Mdrconv_32_cu() {
    double  *hp1;
    cudaDeviceSetLimit(cudaLimitMallocHeapSize, 1073741824);
    cudaFuncSetCacheConfig(ker_Mdrconv_32_cu0, cudaFuncCachePreferL1);
    cudaFuncSetCacheConfig(ker_Mdrconv_32_cu1, cudaFuncCachePreferL1);
    cudaFuncSetCacheConfig(ker_Mdrconv_32_cu2, cudaFuncCachePreferL1);
    cudaFuncSetCacheConfig(ker_Mdrconv_32_cu3, cudaFuncCachePreferL1);
    cudaFuncSetCacheConfig(ker_Mdrconv_32_cu4, cudaFuncCachePreferL1);
    cudaMalloc(((void  * *) &(hp1)), (sizeof(double )*135168));
    cudaMemcpyToSymbol(P1, &(hp1), sizeof(double  *));
    cudaMalloc(((void  * *) &(hp1)), (sizeof(double )*135168));
    cudaMemcpyToSymbol(P2, &(hp1), sizeof(double  *));
}
}
